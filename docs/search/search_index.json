{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project: BashLib64 \u00b6 1 2 3 4 5 6 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d Overview \u00b6 BashLib64 is a project for creating Bash functions that can facilitate and accelerate the development of Bash scripts and code snippets such as the ones used to create container images. Deployment \u00b6 OS Compatibility \u00b6 The library has been tested on the following operating systems: CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Debian10 Debian11 Prerequisites \u00b6 Minimum Bash version: 5 Installation \u00b6 Add library to existing script \u00b6 Download the library to the project directory cd <PROJECT_DIR> ; wget https://raw.githubusercontent.com/serdigital64/bashlib64/main/bashlib64.bash Add the library loader to the target script: source \"<PROJECT_DIR>/bashlib64.bash\" Create new script \u00b6 Download the library to the project directory cd <PROJECT_DIR> ; wget https://raw.githubusercontent.com/serdigital64/bashlib64/main/bashlib64.bash Download the skeleton script: wget https://raw.githubusercontent.com/serdigital64/bashlib64/main/skel/generic Customize the script by adding new content and replacing the predefined tags: Tag Purpose X_AUTHOR_ALIAS_X Author alias, short-name, or AKA X_AUTHOR_GIT_URL_X Author's GIT repo X_APP_INFO_X Program, script, app short description X_APP_VERSION_X Code version X_APP_NAMESPACE_X Script namespace X_PROJECT_GIT_URL_X Project GIT Repo URL Development \u00b6 Repositories \u00b6 Project GIT repository: https://github.com/serdigital64/bashlib64 Project Documentation: https://serdigital64.github.io/bashlib64/ Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Contributor Covenant Code of Conduct License \u00b6 GPL-3.0-or-later Author \u00b6 SerDigital64","title":"Home"},{"location":"#project-bashlib64","text":"1 2 3 4 5 6 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d","title":"Project: BashLib64"},{"location":"#overview","text":"BashLib64 is a project for creating Bash functions that can facilitate and accelerate the development of Bash scripts and code snippets such as the ones used to create container images.","title":"Overview"},{"location":"#deployment","text":"","title":"Deployment"},{"location":"#os-compatibility","text":"The library has been tested on the following operating systems: CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Debian10 Debian11","title":"OS Compatibility"},{"location":"#prerequisites","text":"Minimum Bash version: 5","title":"Prerequisites"},{"location":"#installation","text":"","title":"Installation"},{"location":"#add-library-to-existing-script","text":"Download the library to the project directory cd <PROJECT_DIR> ; wget https://raw.githubusercontent.com/serdigital64/bashlib64/main/bashlib64.bash Add the library loader to the target script: source \"<PROJECT_DIR>/bashlib64.bash\"","title":"Add library to existing script"},{"location":"#create-new-script","text":"Download the library to the project directory cd <PROJECT_DIR> ; wget https://raw.githubusercontent.com/serdigital64/bashlib64/main/bashlib64.bash Download the skeleton script: wget https://raw.githubusercontent.com/serdigital64/bashlib64/main/skel/generic Customize the script by adding new content and replacing the predefined tags: Tag Purpose X_AUTHOR_ALIAS_X Author alias, short-name, or AKA X_AUTHOR_GIT_URL_X Author's GIT repo X_APP_INFO_X Program, script, app short description X_APP_VERSION_X Code version X_APP_NAMESPACE_X Script namespace X_PROJECT_GIT_URL_X Project GIT Repo URL","title":"Create new script"},{"location":"#development","text":"","title":"Development"},{"location":"#repositories","text":"Project GIT repository: https://github.com/serdigital64/bashlib64 Project Documentation: https://serdigital64.github.io/bashlib64/","title":"Repositories"},{"location":"#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Contributor Covenant Code of Conduct","title":"Contributing"},{"location":"#license","text":"GPL-3.0-or-later","title":"License"},{"location":"#author","text":"SerDigital64","title":"Author"},{"location":"bl64-arc/","text":"module: bl64-arc \u00b6 Header \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ####################################### # BashLib64 / Manipulate archive files # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.0 ####################################### readonly BL64_ARC_ERROR_MISSING_PARAMETER = 200 readonly BL64_ARC_ERROR_INVALID_DESTINATION = 201 readonly _BL64_ARC_TXT_MISSING_PARAMETER = 'required parameter is missing' readonly _BL64_ARC_TXT_DST_NOT_DIRECTORY = 'the destination is not a directory' Source Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 ####################################### # BashLib64 / Manipulate archive files # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.0 ####################################### ####################################### # Open tar files and remove the source after extraction # # * Preserves permissions but not ownership # * Overwrites destination # # Arguments: # $1: Full path to the source file # $2: Full path to the destination # Outputs: # STDOUT: None # STDERR: tar or lib error messages # Returns: # BL64_ERROR_MISSING_PARAMETER # BL64_ERROR_INVALID_DESTINATION # tar error status ####################################### function bl64_arc_open_tar () { local source = \" $1 \" local destination = \" $2 \" local status = 0 if [[ -z \" $source \" || -z \" $destination \" ]] ; then bl64_msg_show_error \" $_BL64_ARC_TXT_MISSING_PARAMETER (source,destination)\" # shellcheck disable=SC2086 return $BL64_ARC_ERROR_MISSING_PARAMETER fi if [[ ! -d \" $destination \" ]] ; then bl64_msg_show_error \" $_BL64_ARC_TXT_DST_NOT_DIRECTORY ( $destination )\" # shellcheck disable=SC2086 return $BL64_ARC_ERROR_INVALID_DESTINATION fi cd \" $destination \" || return 1 \" $BL64_OS_CMD_TAR \" \\ --overwrite \\ --extract \\ --no-same-owner \\ --preserve-permissions \\ --no-acls \\ --force-local \\ --verbose \\ --auto-compress \\ --file = \" $source \" status = $? (( status == 0 )) && $BL64_OS_ALIAS_RM_FILE \" $source \" return $status }","title":"module: bl64-arc"},{"location":"bl64-arc/#module-bl64-arc","text":"","title":"module: bl64-arc"},{"location":"bl64-arc/#header","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 ####################################### # BashLib64 / Manipulate archive files # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.0 ####################################### readonly BL64_ARC_ERROR_MISSING_PARAMETER = 200 readonly BL64_ARC_ERROR_INVALID_DESTINATION = 201 readonly _BL64_ARC_TXT_MISSING_PARAMETER = 'required parameter is missing' readonly _BL64_ARC_TXT_DST_NOT_DIRECTORY = 'the destination is not a directory'","title":"Header"},{"location":"bl64-arc/#source-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 ####################################### # BashLib64 / Manipulate archive files # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.0 ####################################### ####################################### # Open tar files and remove the source after extraction # # * Preserves permissions but not ownership # * Overwrites destination # # Arguments: # $1: Full path to the source file # $2: Full path to the destination # Outputs: # STDOUT: None # STDERR: tar or lib error messages # Returns: # BL64_ERROR_MISSING_PARAMETER # BL64_ERROR_INVALID_DESTINATION # tar error status ####################################### function bl64_arc_open_tar () { local source = \" $1 \" local destination = \" $2 \" local status = 0 if [[ -z \" $source \" || -z \" $destination \" ]] ; then bl64_msg_show_error \" $_BL64_ARC_TXT_MISSING_PARAMETER (source,destination)\" # shellcheck disable=SC2086 return $BL64_ARC_ERROR_MISSING_PARAMETER fi if [[ ! -d \" $destination \" ]] ; then bl64_msg_show_error \" $_BL64_ARC_TXT_DST_NOT_DIRECTORY ( $destination )\" # shellcheck disable=SC2086 return $BL64_ARC_ERROR_INVALID_DESTINATION fi cd \" $destination \" || return 1 \" $BL64_OS_CMD_TAR \" \\ --overwrite \\ --extract \\ --no-same-owner \\ --preserve-permissions \\ --no-acls \\ --force-local \\ --verbose \\ --auto-compress \\ --file = \" $source \" status = $? (( status == 0 )) && $BL64_OS_ALIAS_RM_FILE \" $source \" return $status }","title":"Source Code"},{"location":"bl64-check/","text":"module: bl64-check \u00b6 Header \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ####################################### # BashLib64 / Check for conditions and report status # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.1.0 ####################################### readonly BL64_CHECK_ERROR_MISSING_PARAMETER = 1 readonly BL64_CHECK_ERROR_FILE_NOT_FOUND = 2 readonly BL64_CHECK_ERROR_FILE_NOT_READ = 3 readonly BL64_CHECK_ERROR_FILE_NOT_EXECUTE = 4 readonly BL64_CHECK_ERROR_DIRECTORY_NOT_FOUND = 5 readonly BL64_CHECK_ERROR_DIRECTORY_NOT_READ = 6 readonly _BL64_CHECK_TXT_MISSING_PARAMETER = 'required parameter is missing' readonly _BL64_CHECK_TXT_COMMAND_NOT_FOUND = 'the command is not present' readonly _BL64_CHECK_TXT_COMMAND_NOT_EXECUTABLE = 'the command is present but has no execution permission' readonly _BL64_CHECK_TXT_FILE_NOT_FOUND = 'the file is not present' readonly _BL64_CHECK_TXT_FILE_NOT_READABLE = 'the file is present but has no read permission' readonly _BL64_CHECK_TXT_DIRECTORY_NOT_FOUND = 'the directory is not present' readonly _BL64_CHECK_TXT_DIRECTORY_NOT_READABLE = 'the directory is present but has no read permission' Source Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 ####################################### # BashLib64 / Check for conditions and report status # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.1.0 ####################################### ####################################### # Check and report if the command is present and has execute permissions for the current user. # # Arguments: # $1: Full path to the command to check # Outputs: # STDOUT: None # STDERR: Error message # Returns: # 0: Command found # $BL64_CHECK_ERROR_MISSING_PARAMETER # $BL64_CHECK_ERROR_FILE_NOT_FOUND # $BL64_CHECK_ERROR_FILE_NOT_EXECUTE ####################################### function bl64_check_command () { local path = \" $1 \" if [[ -z \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_MISSING_PARAMETER (command path)\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_MISSING_PARAMETER fi if [[ ! -f \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_COMMAND_NOT_FOUND ( $path )\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_FILE_NOT_FOUND fi if [[ ! -x \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_COMMAND_NOT_EXECUTABLE ( $path )\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_FILE_NOT_EXECUTE fi : } ####################################### # Check and report if the file is present and has read permissions for the current user. # # Arguments: # $1: Full path to the file # Outputs: # STDOUT: None # STDERR: Error message # Returns: # 0: File found # $BL64_CHECK_ERROR_MISSING_PARAMETER # $BL64_CHECK_ERROR_FILE_NOT_FOUND # $BL64_CHECK_ERROR_FILE_NOT_READ ####################################### function bl64_check_file () { local path = \" $1 \" if [[ -z \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_MISSING_PARAMETER (file path)\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_MISSING_PARAMETER fi if [[ ! -f \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_FILE_NOT_FOUND ( $path )\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_FILE_NOT_FOUND fi if [[ ! -r \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_FILE_NOT_READABLE ( $path )\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_FILE_NOT_READ fi : } ####################################### # Check and report if the directory is present and has read and execute permissions for the current user. # # Arguments: # $1: Full path to the directory # Outputs: # STDOUT: None # STDERR: Error message # Returns: # 0: File found # $BL64_CHECK_ERROR_MISSING_PARAMETER # $BL64_CHECK_ERROR_DIRECTORY_NOT_FOUND # $BL64_CHECK_ERROR_DIRECTORY_NOT_READ ####################################### function bl64_check_directory () { local path = \" $1 \" if [[ -z \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_MISSING_PARAMETER (directory path)\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_MISSING_PARAMETER fi if [[ ! -d \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_DIRECTORY_NOT_FOUND ( $path )\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_DIRECTORY_NOT_FOUND fi if [[ ! -r \" $path \" || ! -x \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_DIRECTORY_NOT_READABLE ( $path )\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_DIRECTORY_NOT_READ fi : }","title":"module: bl64-check"},{"location":"bl64-check/#module-bl64-check","text":"","title":"module: bl64-check"},{"location":"bl64-check/#header","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ####################################### # BashLib64 / Check for conditions and report status # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.1.0 ####################################### readonly BL64_CHECK_ERROR_MISSING_PARAMETER = 1 readonly BL64_CHECK_ERROR_FILE_NOT_FOUND = 2 readonly BL64_CHECK_ERROR_FILE_NOT_READ = 3 readonly BL64_CHECK_ERROR_FILE_NOT_EXECUTE = 4 readonly BL64_CHECK_ERROR_DIRECTORY_NOT_FOUND = 5 readonly BL64_CHECK_ERROR_DIRECTORY_NOT_READ = 6 readonly _BL64_CHECK_TXT_MISSING_PARAMETER = 'required parameter is missing' readonly _BL64_CHECK_TXT_COMMAND_NOT_FOUND = 'the command is not present' readonly _BL64_CHECK_TXT_COMMAND_NOT_EXECUTABLE = 'the command is present but has no execution permission' readonly _BL64_CHECK_TXT_FILE_NOT_FOUND = 'the file is not present' readonly _BL64_CHECK_TXT_FILE_NOT_READABLE = 'the file is present but has no read permission' readonly _BL64_CHECK_TXT_DIRECTORY_NOT_FOUND = 'the directory is not present' readonly _BL64_CHECK_TXT_DIRECTORY_NOT_READABLE = 'the directory is present but has no read permission'","title":"Header"},{"location":"bl64-check/#source-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 ####################################### # BashLib64 / Check for conditions and report status # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.1.0 ####################################### ####################################### # Check and report if the command is present and has execute permissions for the current user. # # Arguments: # $1: Full path to the command to check # Outputs: # STDOUT: None # STDERR: Error message # Returns: # 0: Command found # $BL64_CHECK_ERROR_MISSING_PARAMETER # $BL64_CHECK_ERROR_FILE_NOT_FOUND # $BL64_CHECK_ERROR_FILE_NOT_EXECUTE ####################################### function bl64_check_command () { local path = \" $1 \" if [[ -z \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_MISSING_PARAMETER (command path)\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_MISSING_PARAMETER fi if [[ ! -f \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_COMMAND_NOT_FOUND ( $path )\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_FILE_NOT_FOUND fi if [[ ! -x \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_COMMAND_NOT_EXECUTABLE ( $path )\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_FILE_NOT_EXECUTE fi : } ####################################### # Check and report if the file is present and has read permissions for the current user. # # Arguments: # $1: Full path to the file # Outputs: # STDOUT: None # STDERR: Error message # Returns: # 0: File found # $BL64_CHECK_ERROR_MISSING_PARAMETER # $BL64_CHECK_ERROR_FILE_NOT_FOUND # $BL64_CHECK_ERROR_FILE_NOT_READ ####################################### function bl64_check_file () { local path = \" $1 \" if [[ -z \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_MISSING_PARAMETER (file path)\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_MISSING_PARAMETER fi if [[ ! -f \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_FILE_NOT_FOUND ( $path )\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_FILE_NOT_FOUND fi if [[ ! -r \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_FILE_NOT_READABLE ( $path )\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_FILE_NOT_READ fi : } ####################################### # Check and report if the directory is present and has read and execute permissions for the current user. # # Arguments: # $1: Full path to the directory # Outputs: # STDOUT: None # STDERR: Error message # Returns: # 0: File found # $BL64_CHECK_ERROR_MISSING_PARAMETER # $BL64_CHECK_ERROR_DIRECTORY_NOT_FOUND # $BL64_CHECK_ERROR_DIRECTORY_NOT_READ ####################################### function bl64_check_directory () { local path = \" $1 \" if [[ -z \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_MISSING_PARAMETER (directory path)\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_MISSING_PARAMETER fi if [[ ! -d \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_DIRECTORY_NOT_FOUND ( $path )\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_DIRECTORY_NOT_FOUND fi if [[ ! -r \" $path \" || ! -x \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_CHECK_TXT_DIRECTORY_NOT_READABLE ( $path )\" # shellcheck disable=SC2086 return $BL64_CHECK_ERROR_DIRECTORY_NOT_READ fi : }","title":"Source Code"},{"location":"bl64-core/","text":"module: bl64-core \u00b6 Header \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ####################################### # BashLib64 / Core / Setup run-time environment # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.2 ####################################### export LANG export LC_ALL export LANGUAGE export BL64_LIB_DEBUG = \" ${ BL64_LIB_DEBUG :- 0 } \" export BL64_LIB_STRICT = \" ${ BL64_LIB_STRICT :- 1 } \" export BL64_LIB_LANG = \" ${ BL64_LIB_LANG :- 1 } \" export BL64_LIB_SIGNAL_HUP = \" ${ BL64_LIB_SIGNAL_HUP :- - } \" export BL64_LIB_SIGNAL_STOP = \" ${ BL64_LIB_SIGNAL_STOP :- - } \" export BL64_LIB_SIGNAL_QUIT = \" ${ BL64_LIB_SIGNAL_QUIT :- - } \" export BL64_SCRIPT_NAME = \" ${ BL64_SCRIPT_NAME :- ${ 0 ##*/ }} \" export BL64_SCRIPT_SID = \" ${ BASHPID } \" readonly BL64_LIB_VAR_NULL = '__s64__' readonly BL64_LIB_VAR_TBD = 'TBD' Source Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 ####################################### # BashLib64 / Core / Setup run-time environment # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.1.1 ####################################### # # Main # set -o pipefail if [[ \" $BL64_LIB_STRICT \" == '1' ]] ; then unset -f unalias \\u nalias -a unset -f command unset MAIL unset ENV unset IFS set -u set -p fi # shellcheck disable=SC2064 trap \" $BL64_LIB_SIGNAL_HUP \" 'SIGHUP' # shellcheck disable=SC2064 trap \" $BL64_LIB_SIGNAL_STOP \" 'SIGINT' # shellcheck disable=SC2064 trap \" $BL64_LIB_SIGNAL_QUIT \" 'SIGQUIT' # shellcheck disable=SC2064 trap \" $BL64_LIB_SIGNAL_QUIT \" 'SIGTERM' export TERM = \" ${ TERM :- vt100 } \" bl64_os_get_distro case \" $BL64_OS_DISTRO \" in UBUNTU-* | FEDORA-* | CENTOS-* | OL-* | DEBIAN-* ) if [[ \" $BL64_LIB_LANG \" == '1' ]] ; then LANG = 'C' LC_ALL = 'C' LANGUAGE = 'C' fi ;; * ) printf '%s\\n' \"Fatal: BashLib64 is not supported in the current OS\" > & 2 exit 1 ;; esac bl64_os_set_command bl64_os_set_alias bl64_sudo_set_alias :","title":"module: bl64-core"},{"location":"bl64-core/#module-bl64-core","text":"","title":"module: bl64-core"},{"location":"bl64-core/#header","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ####################################### # BashLib64 / Core / Setup run-time environment # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.2 ####################################### export LANG export LC_ALL export LANGUAGE export BL64_LIB_DEBUG = \" ${ BL64_LIB_DEBUG :- 0 } \" export BL64_LIB_STRICT = \" ${ BL64_LIB_STRICT :- 1 } \" export BL64_LIB_LANG = \" ${ BL64_LIB_LANG :- 1 } \" export BL64_LIB_SIGNAL_HUP = \" ${ BL64_LIB_SIGNAL_HUP :- - } \" export BL64_LIB_SIGNAL_STOP = \" ${ BL64_LIB_SIGNAL_STOP :- - } \" export BL64_LIB_SIGNAL_QUIT = \" ${ BL64_LIB_SIGNAL_QUIT :- - } \" export BL64_SCRIPT_NAME = \" ${ BL64_SCRIPT_NAME :- ${ 0 ##*/ }} \" export BL64_SCRIPT_SID = \" ${ BASHPID } \" readonly BL64_LIB_VAR_NULL = '__s64__' readonly BL64_LIB_VAR_TBD = 'TBD'","title":"Header"},{"location":"bl64-core/#source-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 ####################################### # BashLib64 / Core / Setup run-time environment # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.1.1 ####################################### # # Main # set -o pipefail if [[ \" $BL64_LIB_STRICT \" == '1' ]] ; then unset -f unalias \\u nalias -a unset -f command unset MAIL unset ENV unset IFS set -u set -p fi # shellcheck disable=SC2064 trap \" $BL64_LIB_SIGNAL_HUP \" 'SIGHUP' # shellcheck disable=SC2064 trap \" $BL64_LIB_SIGNAL_STOP \" 'SIGINT' # shellcheck disable=SC2064 trap \" $BL64_LIB_SIGNAL_QUIT \" 'SIGQUIT' # shellcheck disable=SC2064 trap \" $BL64_LIB_SIGNAL_QUIT \" 'SIGTERM' export TERM = \" ${ TERM :- vt100 } \" bl64_os_get_distro case \" $BL64_OS_DISTRO \" in UBUNTU-* | FEDORA-* | CENTOS-* | OL-* | DEBIAN-* ) if [[ \" $BL64_LIB_LANG \" == '1' ]] ; then LANG = 'C' LC_ALL = 'C' LANGUAGE = 'C' fi ;; * ) printf '%s\\n' \"Fatal: BashLib64 is not supported in the current OS\" > & 2 exit 1 ;; esac bl64_os_set_command bl64_os_set_alias bl64_sudo_set_alias :","title":"Source Code"},{"location":"bl64-fmt/","text":"module: bl64-fmt \u00b6 Header \u00b6 1 2 3 4 5 6 7 8 ####################################### # BashLib64 / Format data # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.0 ####################################### Source Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ####################################### # BashLib64 / Format data # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.0 ####################################### ####################################### # Check and report if the command is present and has execute permissions for the current user. # # Arguments: # $1: Full path to the command to check # Outputs: # STDOUT: None # STDERR: Error message # Returns: # grep command exit status ####################################### function bl64_fmt_strip_comments () { local source = \" ${ 1 :- - } \" \" $BL64_OS_CMD_GREP \" -v -E '^#.*$|^ *#.*$' \" $source \" }","title":"module: bl64-fmt"},{"location":"bl64-fmt/#module-bl64-fmt","text":"","title":"module: bl64-fmt"},{"location":"bl64-fmt/#header","text":"1 2 3 4 5 6 7 8 ####################################### # BashLib64 / Format data # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.0 #######################################","title":"Header"},{"location":"bl64-fmt/#source-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ####################################### # BashLib64 / Format data # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.0 ####################################### ####################################### # Check and report if the command is present and has execute permissions for the current user. # # Arguments: # $1: Full path to the command to check # Outputs: # STDOUT: None # STDERR: Error message # Returns: # grep command exit status ####################################### function bl64_fmt_strip_comments () { local source = \" ${ 1 :- - } \" \" $BL64_OS_CMD_GREP \" -v -E '^#.*$|^ *#.*$' \" $source \" }","title":"Source Code"},{"location":"bl64-log/","text":"module: bl64-log \u00b6 Header \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ####################################### # BashLib64 / Log / Write messages to logs repositories # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.1.0 ####################################### readonly BL64_LOG_TYPE_FILE = 'F' readonly BL64_LOG_CATEGORY_INFO = 'info' readonly BL64_LOG_CATEGORY_TASK = 'task' readonly BL64_LOG_CATEGORY_DEBUG = 'debug' readonly BL64_LOG_CATEGORY_WARNING = 'warning' readonly BL64_LOG_CATEGORY_ERROR = 'error' readonly BL64_LOG_CATEGORY_RECORD = 'record' readonly BL64_LOG_ERROR_MISSING_PARAMETER = 200 readonly BL64_LOG_ERROR_INVALID_TYPE = 201 readonly BL64_LOG_ERROR_INVALID_VERBOSE = 202 readonly BL64_LOG_ERROR_NOT_SETUP = 203 readonly _BL64_LOG_TXT_NOT_SETUP = 'missing setup information. Please use the bl64_log_setup function before calling bl64_log_* functions' readonly _BL64_LOG_TXT_MISSING_PARAMETER = 'required parameter is missing' readonly _BL64_LOG_TXT_INVALID_TYPE = 'invalid log type. Please use any of BL64_LOG_TYPE_*' readonly _BL64_LOG_TXT_INVALID_VERBOSE = 'invalid option for verbose. Please use 1 (enable) or 0 (disable)' export BL64_LOG_PATH export BL64_LOG_VERBOSE export BL64_LOG_FS export BL64_LOG_TYPE Source Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 ####################################### # BashLib64 / Log / Write messages to logs repositories # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.1.0 ####################################### ####################################### # Save a log record to the logs repository # # Arguments: # $1: name of the function, command or script name that is generating the message # $2: log message category. Use any of $BL64_LOG_CATEGORY_* # $4: message to be saved to the logs repository # Outputs: # STDOUT: None # STDERR: execution errors # Returns: # 0: log record successfully saved # >0: failed to save the log record # BL64_MSG_ERROR_INVALID_FORMAT ####################################### function _bl64_log_register () { local source = \" $1 \" local category = \" $2 \" local payload = \" $3 \" if [[ -z \" $BL64_LOG_PATH \" || \\ -z \" $BL64_LOG_VERBOSE \" || \\ -z \" $BL64_LOG_TYPE \" || \\ -z \" $BL64_LOG_FS \" ]] ; then bl64_msg_show_error \" $_BL64_LOG_TXT_NOT_SETUP \" return $BL64_LOG_ERROR_NOT_SETUP fi case \" $BL64_LOG_TYPE \" in \" $BL64_LOG_TYPE_FILE \" ) printf '%(%d%m%Y%H%M%S)T%s%s%s%s%s%s%s%s%s%s%s%s\\n' \\ '-1' \\ \" $BL64_LOG_FS \" \\ \" $HOSTNAME \" \\ \" $BL64_LOG_FS \" \\ \" $BL64_SCRIPT_NAME \" \\ \" $BL64_LOG_FS \" \\ \" $BL64_SCRIPT_SID \" \\ \" $BL64_LOG_FS \" \\ \" ${ source } \" \\ \" $BL64_LOG_FS \" \\ \" $category \" \\ \" $BL64_LOG_FS \" \\ \" $payload \" >> \" $BL64_LOG_PATH \" ;; * ) bl64_msg_show_error \" $_BL64_LOG_TXT_INVALID_TYPE \" return $BL64_MSG_ERROR_INVALID_FORMAT esac } ####################################### # Initialize the log repository # # Arguments: # $1: full path to the log repository # $2: show log messages to STDOUT/STDERR?. 1: yes, 0: no # $3: log type. Use any of the constants $BL64_LOG_TYPE_* # $4: field separator character to be used on each log record # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: setup ok # BL64_MSG_ERROR_INVALID_FORMAT # BL64_MSG_ERROR_INVALID_VERBOSE ####################################### function bl64_log_setup () { local path = \" $1 \" local verbose = \" ${ 2 :- 1 } \" local type = \" ${ 3 :- $BL64_LOG_TYPE_FILE } \" local fs = \" ${ 4 :- : } \" # shellcheck disable=SC2086 if [[ -z \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_LOG_TXT_MISSING_PARAMETER \" return $BL64_LOG_ERROR_MISSING_PARAMETER fi # shellcheck disable=SC2086 if [[ \" $type \" ! = \" $BL64_LOG_TYPE_FILE \" ]] ; then bl64_msg_show_error \" $_BL64_LOG_TXT_INVALID_TYPE \" return $BL64_LOG_ERROR_INVALID_TYPE fi # shellcheck disable=SC2086 if [[ \" $verbose \" ! = '0' && \\ \" $verbose \" ! = '1' ]] ; then bl64_msg_show_error \" $_BL64_LOG_TXT_INVALID_VERBOSE \" return $BL64_LOG_ERROR_INVALID_VERBOSE fi BL64_LOG_PATH = \" ${ path } \" && \\ BL64_LOG_VERBOSE = \" ${ verbose } \" && \\ BL64_LOG_TYPE = \" ${ type } \" && \\ BL64_LOG_FS = \" ${ fs } \" } ####################################### # Save a single log record of type 'info' to the logs repository. # Optionally display the message on STDOUT (BL64_LOG_VERBOSE='1') # # Arguments: # $1: message to be recorded # $2: name of the function, command or script name that is generating the message # Outputs: # STDOUT: message (when BL64_LOG_VERBOSE='1') # STDERR: execution errors # Returns: # 0: log record successfully saved # >0: failed to save the log record ####################################### function bl64_log_info () { local payload = \" $1 \" local source = \" ${ 2 :- ${ FUNCNAME [1] }} \" if [[ -n \" $BL64_LOG_VERBOSE \" && \" $BL64_LOG_VERBOSE \" == '1' ]] ; then bl64_msg_show_info \" $payload \" fi _bl64_log_register \\ \" ${ source :- main } \" \\ \" $BL64_LOG_CATEGORY_INFO \" \\ \" $payload \" } ####################################### # Save a single log record of type 'task' to the logs repository. # Optionally display the message on STDOUT (BL64_LOG_VERBOSE='1') # # Arguments: # $1: message to be recorded # $2: name of the function, command or script name that is generating the message # Outputs: # STDOUT: message (when BL64_LOG_VERBOSE='1') # STDERR: execution errors # Returns: # 0: log record successfully saved # >0: failed to save the log record ####################################### function bl64_log_task () { local payload = \" $1 \" local source = \" ${ 2 :- ${ FUNCNAME [1] }} \" if [[ -n \" $BL64_LOG_VERBOSE \" && \" $BL64_LOG_VERBOSE \" == '1' ]] ; then bl64_msg_show_task \" $payload \" fi _bl64_log_register \\ \" ${ source :- main } \" \\ \" $BL64_LOG_CATEGORY_TASK \" \\ \" $payload \" } ####################################### # Save a single log record of type 'error' to the logs repository. # Optionally display the message on STDERR (BL64_LOG_VERBOSE='1') # # Arguments: # $1: message to be recorded # $2: name of the function, command or script name that is generating the message # Outputs: # STDOUT: None # STDERR: execution errors, message (when BL64_LOG_VERBOSE='1') # Returns: # 0: log record successfully saved # >0: failed to save the log record ####################################### function bl64_log_error () { local payload = \" $1 \" local source = \" ${ 2 :- ${ FUNCNAME [1] }} \" if [[ -n \" $BL64_LOG_VERBOSE \" && \" $BL64_LOG_VERBOSE \" == '1' ]] ; then bl64_msg_show_error \" $payload \" fi _bl64_log_register \\ \" ${ source :- main } \" \\ \" $BL64_LOG_CATEGORY_ERROR \" \\ \" $payload \" } ####################################### # Save a single log record of type 'warning' to the logs repository. # Optionally display the message on STDERR (BL64_LOG_VERBOSE='1') # # Arguments: # $1: message to be recorded # $2: name of the function, command or script name that is generating the message # Outputs: # STDOUT: None # STDERR: execution errors, message (when BL64_LOG_VERBOSE='1') # Returns: # 0: log record successfully saved # >0: failed to save the log record ####################################### function bl64_log_warning () { local payload = \" $1 \" local source = \" ${ 2 :- ${ FUNCNAME [1] }} \" if [[ -n \" $BL64_LOG_VERBOSE \" && \" $BL64_LOG_VERBOSE \" == '1' ]] ; then bl64_msg_show_warning \" $payload \" fi _bl64_log_register \\ \" ${ source :- main } \" \\ \" $BL64_LOG_CATEGORY_WARNING \" \\ \" $payload \" } ####################################### # Record a log stream and save it to the logs repository. # Each line is saved as a different log record. # # Arguments: # $1: short alphanumeric string to identify the log stream # $2: name of the function, command or script name that is generating the stream # Outputs: # STDOUT: None # STDERR: execution errors # Returns: # 0: stream successfully saved # >0: failed to save the stream ####################################### function bl64_log_record () { local tag = \" ${ 1 :- tag } \" local source = \" ${ 2 :- ${ FUNCNAME [1] }} \" local input_log_line = '' case \" $BL64_LOG_TYPE \" in \" $BL64_LOG_TYPE_FILE \" ) while read -r input_log_line ; do _bl64_log_register \\ \" ${ source :- main } \" \\ \" $BL64_LOG_CATEGORY_RECORD \" \\ \" ${ tag }${ BL64_LOG_FS }${ input_log_line } \" done ;; esac }","title":"module: bl64-log"},{"location":"bl64-log/#module-bl64-log","text":"","title":"module: bl64-log"},{"location":"bl64-log/#header","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ####################################### # BashLib64 / Log / Write messages to logs repositories # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.1.0 ####################################### readonly BL64_LOG_TYPE_FILE = 'F' readonly BL64_LOG_CATEGORY_INFO = 'info' readonly BL64_LOG_CATEGORY_TASK = 'task' readonly BL64_LOG_CATEGORY_DEBUG = 'debug' readonly BL64_LOG_CATEGORY_WARNING = 'warning' readonly BL64_LOG_CATEGORY_ERROR = 'error' readonly BL64_LOG_CATEGORY_RECORD = 'record' readonly BL64_LOG_ERROR_MISSING_PARAMETER = 200 readonly BL64_LOG_ERROR_INVALID_TYPE = 201 readonly BL64_LOG_ERROR_INVALID_VERBOSE = 202 readonly BL64_LOG_ERROR_NOT_SETUP = 203 readonly _BL64_LOG_TXT_NOT_SETUP = 'missing setup information. Please use the bl64_log_setup function before calling bl64_log_* functions' readonly _BL64_LOG_TXT_MISSING_PARAMETER = 'required parameter is missing' readonly _BL64_LOG_TXT_INVALID_TYPE = 'invalid log type. Please use any of BL64_LOG_TYPE_*' readonly _BL64_LOG_TXT_INVALID_VERBOSE = 'invalid option for verbose. Please use 1 (enable) or 0 (disable)' export BL64_LOG_PATH export BL64_LOG_VERBOSE export BL64_LOG_FS export BL64_LOG_TYPE","title":"Header"},{"location":"bl64-log/#source-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 ####################################### # BashLib64 / Log / Write messages to logs repositories # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.1.0 ####################################### ####################################### # Save a log record to the logs repository # # Arguments: # $1: name of the function, command or script name that is generating the message # $2: log message category. Use any of $BL64_LOG_CATEGORY_* # $4: message to be saved to the logs repository # Outputs: # STDOUT: None # STDERR: execution errors # Returns: # 0: log record successfully saved # >0: failed to save the log record # BL64_MSG_ERROR_INVALID_FORMAT ####################################### function _bl64_log_register () { local source = \" $1 \" local category = \" $2 \" local payload = \" $3 \" if [[ -z \" $BL64_LOG_PATH \" || \\ -z \" $BL64_LOG_VERBOSE \" || \\ -z \" $BL64_LOG_TYPE \" || \\ -z \" $BL64_LOG_FS \" ]] ; then bl64_msg_show_error \" $_BL64_LOG_TXT_NOT_SETUP \" return $BL64_LOG_ERROR_NOT_SETUP fi case \" $BL64_LOG_TYPE \" in \" $BL64_LOG_TYPE_FILE \" ) printf '%(%d%m%Y%H%M%S)T%s%s%s%s%s%s%s%s%s%s%s%s\\n' \\ '-1' \\ \" $BL64_LOG_FS \" \\ \" $HOSTNAME \" \\ \" $BL64_LOG_FS \" \\ \" $BL64_SCRIPT_NAME \" \\ \" $BL64_LOG_FS \" \\ \" $BL64_SCRIPT_SID \" \\ \" $BL64_LOG_FS \" \\ \" ${ source } \" \\ \" $BL64_LOG_FS \" \\ \" $category \" \\ \" $BL64_LOG_FS \" \\ \" $payload \" >> \" $BL64_LOG_PATH \" ;; * ) bl64_msg_show_error \" $_BL64_LOG_TXT_INVALID_TYPE \" return $BL64_MSG_ERROR_INVALID_FORMAT esac } ####################################### # Initialize the log repository # # Arguments: # $1: full path to the log repository # $2: show log messages to STDOUT/STDERR?. 1: yes, 0: no # $3: log type. Use any of the constants $BL64_LOG_TYPE_* # $4: field separator character to be used on each log record # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: setup ok # BL64_MSG_ERROR_INVALID_FORMAT # BL64_MSG_ERROR_INVALID_VERBOSE ####################################### function bl64_log_setup () { local path = \" $1 \" local verbose = \" ${ 2 :- 1 } \" local type = \" ${ 3 :- $BL64_LOG_TYPE_FILE } \" local fs = \" ${ 4 :- : } \" # shellcheck disable=SC2086 if [[ -z \" $path \" ]] ; then bl64_msg_show_error \" $_BL64_LOG_TXT_MISSING_PARAMETER \" return $BL64_LOG_ERROR_MISSING_PARAMETER fi # shellcheck disable=SC2086 if [[ \" $type \" ! = \" $BL64_LOG_TYPE_FILE \" ]] ; then bl64_msg_show_error \" $_BL64_LOG_TXT_INVALID_TYPE \" return $BL64_LOG_ERROR_INVALID_TYPE fi # shellcheck disable=SC2086 if [[ \" $verbose \" ! = '0' && \\ \" $verbose \" ! = '1' ]] ; then bl64_msg_show_error \" $_BL64_LOG_TXT_INVALID_VERBOSE \" return $BL64_LOG_ERROR_INVALID_VERBOSE fi BL64_LOG_PATH = \" ${ path } \" && \\ BL64_LOG_VERBOSE = \" ${ verbose } \" && \\ BL64_LOG_TYPE = \" ${ type } \" && \\ BL64_LOG_FS = \" ${ fs } \" } ####################################### # Save a single log record of type 'info' to the logs repository. # Optionally display the message on STDOUT (BL64_LOG_VERBOSE='1') # # Arguments: # $1: message to be recorded # $2: name of the function, command or script name that is generating the message # Outputs: # STDOUT: message (when BL64_LOG_VERBOSE='1') # STDERR: execution errors # Returns: # 0: log record successfully saved # >0: failed to save the log record ####################################### function bl64_log_info () { local payload = \" $1 \" local source = \" ${ 2 :- ${ FUNCNAME [1] }} \" if [[ -n \" $BL64_LOG_VERBOSE \" && \" $BL64_LOG_VERBOSE \" == '1' ]] ; then bl64_msg_show_info \" $payload \" fi _bl64_log_register \\ \" ${ source :- main } \" \\ \" $BL64_LOG_CATEGORY_INFO \" \\ \" $payload \" } ####################################### # Save a single log record of type 'task' to the logs repository. # Optionally display the message on STDOUT (BL64_LOG_VERBOSE='1') # # Arguments: # $1: message to be recorded # $2: name of the function, command or script name that is generating the message # Outputs: # STDOUT: message (when BL64_LOG_VERBOSE='1') # STDERR: execution errors # Returns: # 0: log record successfully saved # >0: failed to save the log record ####################################### function bl64_log_task () { local payload = \" $1 \" local source = \" ${ 2 :- ${ FUNCNAME [1] }} \" if [[ -n \" $BL64_LOG_VERBOSE \" && \" $BL64_LOG_VERBOSE \" == '1' ]] ; then bl64_msg_show_task \" $payload \" fi _bl64_log_register \\ \" ${ source :- main } \" \\ \" $BL64_LOG_CATEGORY_TASK \" \\ \" $payload \" } ####################################### # Save a single log record of type 'error' to the logs repository. # Optionally display the message on STDERR (BL64_LOG_VERBOSE='1') # # Arguments: # $1: message to be recorded # $2: name of the function, command or script name that is generating the message # Outputs: # STDOUT: None # STDERR: execution errors, message (when BL64_LOG_VERBOSE='1') # Returns: # 0: log record successfully saved # >0: failed to save the log record ####################################### function bl64_log_error () { local payload = \" $1 \" local source = \" ${ 2 :- ${ FUNCNAME [1] }} \" if [[ -n \" $BL64_LOG_VERBOSE \" && \" $BL64_LOG_VERBOSE \" == '1' ]] ; then bl64_msg_show_error \" $payload \" fi _bl64_log_register \\ \" ${ source :- main } \" \\ \" $BL64_LOG_CATEGORY_ERROR \" \\ \" $payload \" } ####################################### # Save a single log record of type 'warning' to the logs repository. # Optionally display the message on STDERR (BL64_LOG_VERBOSE='1') # # Arguments: # $1: message to be recorded # $2: name of the function, command or script name that is generating the message # Outputs: # STDOUT: None # STDERR: execution errors, message (when BL64_LOG_VERBOSE='1') # Returns: # 0: log record successfully saved # >0: failed to save the log record ####################################### function bl64_log_warning () { local payload = \" $1 \" local source = \" ${ 2 :- ${ FUNCNAME [1] }} \" if [[ -n \" $BL64_LOG_VERBOSE \" && \" $BL64_LOG_VERBOSE \" == '1' ]] ; then bl64_msg_show_warning \" $payload \" fi _bl64_log_register \\ \" ${ source :- main } \" \\ \" $BL64_LOG_CATEGORY_WARNING \" \\ \" $payload \" } ####################################### # Record a log stream and save it to the logs repository. # Each line is saved as a different log record. # # Arguments: # $1: short alphanumeric string to identify the log stream # $2: name of the function, command or script name that is generating the stream # Outputs: # STDOUT: None # STDERR: execution errors # Returns: # 0: stream successfully saved # >0: failed to save the stream ####################################### function bl64_log_record () { local tag = \" ${ 1 :- tag } \" local source = \" ${ 2 :- ${ FUNCNAME [1] }} \" local input_log_line = '' case \" $BL64_LOG_TYPE \" in \" $BL64_LOG_TYPE_FILE \" ) while read -r input_log_line ; do _bl64_log_register \\ \" ${ source :- main } \" \\ \" $BL64_LOG_CATEGORY_RECORD \" \\ \" ${ tag }${ BL64_LOG_FS }${ input_log_line } \" done ;; esac }","title":"Source Code"},{"location":"bl64-msg/","text":"module: bl64-msg \u00b6 Header \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ####################################### # BashLib64 / Msg / Display messages # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.1.0 ####################################### readonly BL64_MSG_FORMAT_PLAIN = 'R' readonly BL64_MSG_FORMAT_HOST = 'H' readonly BL64_MSG_FORMAT_TIME = 'T' readonly BL64_MSG_FORMAT_CALLER = 'C' readonly BL64_MSG_FORMAT_FULL = 'F' readonly BL64_MSG_ERROR_INVALID_FORMAT = 200 readonly _BL64_MSG_TXT_USAGE = 'Usage' readonly _BL64_MSG_TXT_COMMANDS = 'Commands' readonly _BL64_MSG_TXT_FLAGS = 'Flags' readonly _BL64_MSG_TXT_PARAMETERS = 'Parameters' readonly _BL64_MSG_TXT_ERROR = 'Error' readonly _BL64_MSG_TXT_INFO = 'Info' readonly _BL64_MSG_TXT_TASK = 'Task' readonly _BL64_MSG_TXT_DEBUG = 'Debug' readonly _BL64_MSG_TXT_WARNING = 'Warning' readonly _BL64_MSG_TXT_INVALID_FORMAT = 'invalid format. Please use one of BL64_MSG_FORMAT_*' export BL64_MSG_FORMAT = \" ${ BL64_MSG_FORMAT :- $BL64_MSG_FORMAT_FULL } \" Source Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 ####################################### # BashLib64 / Msg / Display messages # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.1.0 ####################################### ####################################### # Display message helper # # Arguments: # $1: type of message # $2: message to show # Outputs: # STDOUT: message # STDERR: message when type is error or warning # Returns: # printf exit status # BL64_MSG_ERROR_INVALID_FORMAT ####################################### function _bl64_msg_show () { local type = \" $1 \" local message = \" $2 \" case \" $BL64_MSG_FORMAT \" in \" $BL64_MSG_FORMAT_PLAIN \" ) printf \"%s: %s\\n\" \\ \" $type \" \\ \" $message \" ;; \" $BL64_MSG_FORMAT_HOST \" ) printf \"@%s %s: %s\\n\" \\ \" $HOSTNAME \" \\ \" $type \" \\ \" $message \" ;; \" $BL64_MSG_FORMAT_TIME \" ) printf \"[%(%d/%b/%Y-%H:%M:%S)T] %s: %s\\n\" \\ '-1' \\ \" $type \" \\ \" $message \" ;; \" $BL64_MSG_FORMAT_CALLER \" ) printf \"%s %s: %s\\n\" \\ \" $BL64_SCRIPT_NAME \" \\ \" $type \" \\ \" $message \" ;; \" $BL64_MSG_FORMAT_FULL \" ) printf \"%s@%s[%(%d/%b/%Y-%H:%M:%S)T] %s: %s\\n\" \\ \" $BL64_SCRIPT_NAME \" \\ \" $HOSTNAME \" \\ '-1' \\ \" $type \" \\ \" $message \" ;; * ) bl64_msg_show_error \" $_BL64_MSG_TXT_INVALID_FORMAT \" return $BL64_MSG_ERROR_INVALID_FORMAT esac } ####################################### # Setup the message library # # Arguments: # $1: define message format. One of BL64_MSG_FORMAT_* # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: successfull execution # BL64_MSG_ERROR_INVALID_FORMAT ####################################### function bl64_msg_setup () { local format = \" $1 \" # shellcheck disable=SC2086 if [[ \" $format \" ! = \" $BL64_MSG_FORMAT_PLAIN \" && \\ \" $format \" ! = \" $BL64_MSG_FORMAT_HOST \" && \\ \" $format \" ! = \" $BL64_MSG_FORMAT_TIME \" && \\ \" $format \" ! = \" $BL64_MSG_FORMAT_CALLER \" && \\ \" $format \" ! = \" $BL64_MSG_FORMAT_FULL \" ]] ; then bl64_msg_show_error \" $_BL64_MSG_TXT_INVALID_FORMAT \" return $BL64_MSG_ERROR_INVALID_FORMAT fi BL64_MSG_FORMAT = \" $format \" } ####################################### # Show script usage information # # Arguments: # $1: script command line. Include all required and optional components # $2: full script usage description # $3: list of script commands # $4: list of script flags # $5: list of script parameters # Outputs: # STDOUT: usage info # STDERR: None # Returns: # 0: successfull execution # >0: printf error ####################################### function bl64_msg_show_usage () { local usage = \" ${ 1 :- $BL64_LIB_VAR_TBD } \" local description = \" ${ 2 :- $BL64_LIB_VAR_NULL } \" local commands = \" ${ 3 :- $BL64_LIB_VAR_NULL } \" local flags = \" ${ 4 :- $BL64_LIB_VAR_NULL } \" local parameters = \" ${ 5 :- $BL64_LIB_VAR_NULL } \" printf '\\n%s: %s %s\\n\\n' \" $_BL64_MSG_TXT_USAGE \" \" $BL64_SCRIPT_NAME \" \" $usage \" if [[ \" $description \" ! = \" $BL64_LIB_VAR_NULL \" ]] ; then printf '%s\\n\\n' \" $description \" fi if [[ \" $commands \" ! = \" $BL64_LIB_VAR_NULL \" ]] ; then printf '%s\\n%s\\n' \" $_BL64_MSG_TXT_COMMANDS \" \" $commands \" fi if [[ \" $flags \" ! = \" $BL64_LIB_VAR_NULL \" ]] ; then printf '%s\\n%s\\n' \" $_BL64_MSG_TXT_FLAGS \" \" $flags \" fi if [[ \" $parameters \" ! = \" $BL64_LIB_VAR_NULL \" ]] ; then printf '%s\\n%s\\n' \" $_BL64_MSG_TXT_PARAMETERS \" \" $parameters \" fi return 0 } ####################################### # Display error message # # Arguments: # $1: error message # Outputs: # STDOUT: none # STDERR: message # Returns: # 0: successfull execution # >0: printf error ####################################### function bl64_msg_show_error () { local message = \" ${ 1 - $BL64_LIB_VAR_TBD } \" _bl64_msg_show \" $_BL64_MSG_TXT_ERROR \" \" $message \" > & 2 } ####################################### # Display warning message # # Arguments: # $1: warning message # Outputs: # STDOUT: none # STDERR: message # Returns: # 0: successfull execution # >0: printf error ####################################### function bl64_msg_show_warning () { local message = \" ${ 1 - $BL64_LIB_VAR_TBD } \" _bl64_msg_show \" $_BL64_MSG_TXT_WARNING \" \" $message \" > & 2 } ####################################### # Display info message # # Arguments: # $1: message # Outputs: # STDOUT: message # STDERR: None # Returns: # 0: successfull execution # >0: printf error ####################################### function bl64_msg_show_info () { local message = \" ${ 1 - $BL64_LIB_VAR_TBD } \" _bl64_msg_show \" $_BL64_MSG_TXT_INFO \" \" $message \" } ####################################### # Display task message # # Arguments: # $1: message # Outputs: # STDOUT: message # STDERR: None # Returns: # 0: successfull execution # >0: printf error ####################################### function bl64_msg_show_task () { local message = \" ${ 1 - $BL64_LIB_VAR_TBD } \" _bl64_msg_show \" $_BL64_MSG_TXT_TASK \" \" $message \" } ####################################### # Display debug message # # Arguments:formatting # $1: message # Outputs: # STDOUT: None # STDERR: messageformatting # Returns: # 0: successfull execution # >0: printf error ####################################### function bl64_msg_show_debug () { local message = \" ${ 1 - $BL64_LIB_VAR_TBD } \" _bl64_msg_show \" $_BL64_MSG_TXT_DEBUG \" \" $message \" > & 2 } ####################################### # Display message. Plain output, no extra info. # # Arguments: # $1: message # Outputs: # STDOUT: message # STDERR: None # Returns: # 0: successfull execution # >0: printf error ####################################### function bl64_msg_show_text () { local message = \" ${ 1 - $BL64_LIB_VAR_TBD } \" printf '%s\\n' \" $message \" return 0 }","title":"module: bl64-msg"},{"location":"bl64-msg/#module-bl64-msg","text":"","title":"module: bl64-msg"},{"location":"bl64-msg/#header","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ####################################### # BashLib64 / Msg / Display messages # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.1.0 ####################################### readonly BL64_MSG_FORMAT_PLAIN = 'R' readonly BL64_MSG_FORMAT_HOST = 'H' readonly BL64_MSG_FORMAT_TIME = 'T' readonly BL64_MSG_FORMAT_CALLER = 'C' readonly BL64_MSG_FORMAT_FULL = 'F' readonly BL64_MSG_ERROR_INVALID_FORMAT = 200 readonly _BL64_MSG_TXT_USAGE = 'Usage' readonly _BL64_MSG_TXT_COMMANDS = 'Commands' readonly _BL64_MSG_TXT_FLAGS = 'Flags' readonly _BL64_MSG_TXT_PARAMETERS = 'Parameters' readonly _BL64_MSG_TXT_ERROR = 'Error' readonly _BL64_MSG_TXT_INFO = 'Info' readonly _BL64_MSG_TXT_TASK = 'Task' readonly _BL64_MSG_TXT_DEBUG = 'Debug' readonly _BL64_MSG_TXT_WARNING = 'Warning' readonly _BL64_MSG_TXT_INVALID_FORMAT = 'invalid format. Please use one of BL64_MSG_FORMAT_*' export BL64_MSG_FORMAT = \" ${ BL64_MSG_FORMAT :- $BL64_MSG_FORMAT_FULL } \"","title":"Header"},{"location":"bl64-msg/#source-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 ####################################### # BashLib64 / Msg / Display messages # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.1.0 ####################################### ####################################### # Display message helper # # Arguments: # $1: type of message # $2: message to show # Outputs: # STDOUT: message # STDERR: message when type is error or warning # Returns: # printf exit status # BL64_MSG_ERROR_INVALID_FORMAT ####################################### function _bl64_msg_show () { local type = \" $1 \" local message = \" $2 \" case \" $BL64_MSG_FORMAT \" in \" $BL64_MSG_FORMAT_PLAIN \" ) printf \"%s: %s\\n\" \\ \" $type \" \\ \" $message \" ;; \" $BL64_MSG_FORMAT_HOST \" ) printf \"@%s %s: %s\\n\" \\ \" $HOSTNAME \" \\ \" $type \" \\ \" $message \" ;; \" $BL64_MSG_FORMAT_TIME \" ) printf \"[%(%d/%b/%Y-%H:%M:%S)T] %s: %s\\n\" \\ '-1' \\ \" $type \" \\ \" $message \" ;; \" $BL64_MSG_FORMAT_CALLER \" ) printf \"%s %s: %s\\n\" \\ \" $BL64_SCRIPT_NAME \" \\ \" $type \" \\ \" $message \" ;; \" $BL64_MSG_FORMAT_FULL \" ) printf \"%s@%s[%(%d/%b/%Y-%H:%M:%S)T] %s: %s\\n\" \\ \" $BL64_SCRIPT_NAME \" \\ \" $HOSTNAME \" \\ '-1' \\ \" $type \" \\ \" $message \" ;; * ) bl64_msg_show_error \" $_BL64_MSG_TXT_INVALID_FORMAT \" return $BL64_MSG_ERROR_INVALID_FORMAT esac } ####################################### # Setup the message library # # Arguments: # $1: define message format. One of BL64_MSG_FORMAT_* # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: successfull execution # BL64_MSG_ERROR_INVALID_FORMAT ####################################### function bl64_msg_setup () { local format = \" $1 \" # shellcheck disable=SC2086 if [[ \" $format \" ! = \" $BL64_MSG_FORMAT_PLAIN \" && \\ \" $format \" ! = \" $BL64_MSG_FORMAT_HOST \" && \\ \" $format \" ! = \" $BL64_MSG_FORMAT_TIME \" && \\ \" $format \" ! = \" $BL64_MSG_FORMAT_CALLER \" && \\ \" $format \" ! = \" $BL64_MSG_FORMAT_FULL \" ]] ; then bl64_msg_show_error \" $_BL64_MSG_TXT_INVALID_FORMAT \" return $BL64_MSG_ERROR_INVALID_FORMAT fi BL64_MSG_FORMAT = \" $format \" } ####################################### # Show script usage information # # Arguments: # $1: script command line. Include all required and optional components # $2: full script usage description # $3: list of script commands # $4: list of script flags # $5: list of script parameters # Outputs: # STDOUT: usage info # STDERR: None # Returns: # 0: successfull execution # >0: printf error ####################################### function bl64_msg_show_usage () { local usage = \" ${ 1 :- $BL64_LIB_VAR_TBD } \" local description = \" ${ 2 :- $BL64_LIB_VAR_NULL } \" local commands = \" ${ 3 :- $BL64_LIB_VAR_NULL } \" local flags = \" ${ 4 :- $BL64_LIB_VAR_NULL } \" local parameters = \" ${ 5 :- $BL64_LIB_VAR_NULL } \" printf '\\n%s: %s %s\\n\\n' \" $_BL64_MSG_TXT_USAGE \" \" $BL64_SCRIPT_NAME \" \" $usage \" if [[ \" $description \" ! = \" $BL64_LIB_VAR_NULL \" ]] ; then printf '%s\\n\\n' \" $description \" fi if [[ \" $commands \" ! = \" $BL64_LIB_VAR_NULL \" ]] ; then printf '%s\\n%s\\n' \" $_BL64_MSG_TXT_COMMANDS \" \" $commands \" fi if [[ \" $flags \" ! = \" $BL64_LIB_VAR_NULL \" ]] ; then printf '%s\\n%s\\n' \" $_BL64_MSG_TXT_FLAGS \" \" $flags \" fi if [[ \" $parameters \" ! = \" $BL64_LIB_VAR_NULL \" ]] ; then printf '%s\\n%s\\n' \" $_BL64_MSG_TXT_PARAMETERS \" \" $parameters \" fi return 0 } ####################################### # Display error message # # Arguments: # $1: error message # Outputs: # STDOUT: none # STDERR: message # Returns: # 0: successfull execution # >0: printf error ####################################### function bl64_msg_show_error () { local message = \" ${ 1 - $BL64_LIB_VAR_TBD } \" _bl64_msg_show \" $_BL64_MSG_TXT_ERROR \" \" $message \" > & 2 } ####################################### # Display warning message # # Arguments: # $1: warning message # Outputs: # STDOUT: none # STDERR: message # Returns: # 0: successfull execution # >0: printf error ####################################### function bl64_msg_show_warning () { local message = \" ${ 1 - $BL64_LIB_VAR_TBD } \" _bl64_msg_show \" $_BL64_MSG_TXT_WARNING \" \" $message \" > & 2 } ####################################### # Display info message # # Arguments: # $1: message # Outputs: # STDOUT: message # STDERR: None # Returns: # 0: successfull execution # >0: printf error ####################################### function bl64_msg_show_info () { local message = \" ${ 1 - $BL64_LIB_VAR_TBD } \" _bl64_msg_show \" $_BL64_MSG_TXT_INFO \" \" $message \" } ####################################### # Display task message # # Arguments: # $1: message # Outputs: # STDOUT: message # STDERR: None # Returns: # 0: successfull execution # >0: printf error ####################################### function bl64_msg_show_task () { local message = \" ${ 1 - $BL64_LIB_VAR_TBD } \" _bl64_msg_show \" $_BL64_MSG_TXT_TASK \" \" $message \" } ####################################### # Display debug message # # Arguments:formatting # $1: message # Outputs: # STDOUT: None # STDERR: messageformatting # Returns: # 0: successfull execution # >0: printf error ####################################### function bl64_msg_show_debug () { local message = \" ${ 1 - $BL64_LIB_VAR_TBD } \" _bl64_msg_show \" $_BL64_MSG_TXT_DEBUG \" \" $message \" > & 2 } ####################################### # Display message. Plain output, no extra info. # # Arguments: # $1: message # Outputs: # STDOUT: message # STDERR: None # Returns: # 0: successfull execution # >0: printf error ####################################### function bl64_msg_show_text () { local message = \" ${ 1 - $BL64_LIB_VAR_TBD } \" printf '%s\\n' \" $message \" return 0 }","title":"Source Code"},{"location":"bl64-os/","text":"module: bl64-os \u00b6 Header \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 ####################################### # BashLib64 / OS / Identify OS attributes # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.2.0 ####################################### export BL64_OS_DISTRO export BL64_OS_CMD_AWK export BL64_OS_CMD_CAT export BL64_OS_CMD_CHMOD export BL64_OS_CMD_CHOWN export BL64_OS_CMD_CP export BL64_OS_CMD_CAT export BL64_OS_CMD_DATE export BL64_OS_CMD_HOSTNAME export BL64_OS_CMD_GREP export BL64_OS_CMD_ID export BL64_OS_CMD_LS export BL64_OS_CMD_MKDIR export BL64_OS_CMD_MKTEMP export BL64_OS_CMD_MV export BL64_OS_CMD_RM export BL64_OS_CMD_TAR export BL64_OS_CMD_USERADD export BL64_OS_ALIAS_CHOWN_DIR export BL64_OS_ALIAS_CP_FILE export BL64_OS_ALIAS_ID_USER export BL64_OS_ALIAS_LS_FILES export BL64_OS_ALIAS_MKDIR_FULL export BL64_OS_ALIAS_MV export BL64_OS_ALIAS_RM_FILE export BL64_OS_ALIAS_RM_FULL Source Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 ####################################### # BashLib64 / OS / Identify OS attributes # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.2.0 ####################################### ####################################### # Identify and normalize Linux OS distribution name and version # # Arguments: # None # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: ok: always ok, even when unable to identify the platform ####################################### function bl64_os_get_distro () { BL64_OS_DISTRO = 'UNKNOWN' if [[ -r '/etc/os-release' ]] ; then # shellcheck disable=SC1091 source '/etc/os-release' if [[ -n \" $ID \" && -n \" $VERSION_ID \" ]] ; then BL64_OS_DISTRO = \" ${ ID ^^ } - ${ VERSION_ID } \" fi fi return 0 } ####################################### # Identify and normalize common *nix OS commands # Commands are exported as variables with full path # # Arguments: # None # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: always ok, even when the OS is not supported ####################################### function bl64_os_set_command () { if [[ \" $BL64_OS_DISTRO \" = ~ ( UBUNTU-.* | FEDORA-.* | CENTOS-.* | OL-.* | DEBIAN-.* ) ]] ; then BL64_OS_CMD_AWK = '/usr/bin/awk' BL64_OS_CMD_ID = '/usr/bin/id' BL64_OS_CMD_USERADD = '/usr/sbin/useradd' BL64_OS_CMD_TAR = '/bin/tar' fi if [[ \" $BL64_OS_DISTRO \" = ~ ( UBUNTU-.* | DEBIAN-.* ) ]] ; then BL64_OS_CMD_CAT = '/bin/cat' BL64_OS_CMD_CHMOD = '/bin/chmod' BL64_OS_CMD_CHOWN = '/bin/chown' BL64_OS_CMD_CP = '/bin/cp' BL64_OS_CMD_DATE = \"/bin/date\" BL64_OS_CMD_GREP = '/bin/grep' BL64_OS_CMD_HOSTNAME = '/bin/hostname' BL64_OS_CMD_LS = '/bin/ls' BL64_OS_CMD_MKDIR = '/bin/mkdir' BL64_OS_CMD_MKTEMP = '/bin/mktemp' BL64_OS_CMD_MV = '/bin/mv' BL64_OS_CMD_RM = '/bin/rm' fi if [[ \" $BL64_OS_DISTRO \" = ~ ( FEDORA-.* | CENTOS-.* | OL-.* ) ]] ; then BL64_OS_CMD_CAT = '/usr/bin/cat' BL64_OS_CMD_CHMOD = '/usr/bin/chmod' BL64_OS_CMD_CHOWN = '/usr/bin/chown' BL64_OS_CMD_CP = '/usr/bin/cp' BL64_OS_CMD_DATE = \"/usr/bin/date\" BL64_OS_CMD_GREP = '/usr/bin/grep' BL64_OS_CMD_HOSTNAME = '/usr/bin/hostname' BL64_OS_CMD_LS = '/usr/bin/ls' BL64_OS_CMD_MKDIR = '/usr/bin/mkdir' BL64_OS_CMD_MKTEMP = '/usr/bin/mktemp' BL64_OS_CMD_MV = '/usr/bin/mv' BL64_OS_CMD_RM = '/usr/bin/rm' fi return 0 } ####################################### # Create command aliases for common use cases # Aliases are presented as regular shell variables for easy inclusion in SUDO # Use the alias without quotes, otherwise the shell will interprete spaces as part of the command # # Arguments: # None # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: always ok ####################################### function bl64_os_set_alias () { BL64_OS_ALIAS_CHOWN_DIR = \" $BL64_OS_CMD_CHOWN --verbose --recursive\" BL64_OS_ALIAS_CP_FILE = \" $BL64_OS_CMD_CP --verbose --force\" BL64_OS_ALIAS_ID_USER = \" $BL64_OS_CMD_ID -u -n\" BL64_OS_ALIAS_LS_FILES = \" $BL64_OS_CMD_LS --color=never\" BL64_OS_ALIAS_MKDIR_FULL = \" $BL64_OS_CMD_MKDIR --parents --verbose\" BL64_OS_ALIAS_MV = \" $BL64_OS_CMD_MV --force --verbose\" BL64_OS_ALIAS_RM_FILE = \" $BL64_OS_CMD_RM --verbose --force --one-file-system\" BL64_OS_ALIAS_RM_FULL = \" $BL64_OS_CMD_RM --verbose --force --one-file-system --recursive\" } ####################################### # Remove content from OS temporary repositories # # Arguments: # None # Outputs: # STDOUT: output from the rm command # STDERR: output from the rm command # Returns: # 0: always ok ####################################### function bl64_os_cleanup_tmps () { $BL64_OS_ALIAS_RM_FILE -- /tmp/* $BL64_OS_ALIAS_RM_FILE -- /var/tmp/* : } ####################################### # Remove or reset logs from standard locations # # Arguments: # None # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: always ok ####################################### function bl64_os_cleanup_logs () { : } ####################################### # Remove or reset caches from standard locations # # Arguments: # None # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: always ok ####################################### function bl64_os_cleanup_caches () { : } ####################################### # Performs a complete cleanup of the OS # # * Removes temporary files # * Cleans caches # * Removes or resets logs # # Arguments: # None # Outputs: # STDOUT: output from clean functions # STDERR: output from clean functions # Returns: # 0: always ok ####################################### function bl64_os_cleanup_full () { bl64_pkg_cleanup bl64_os_cleanup_tmps bl64_os_cleanup_logs bl64_os_cleanup_caches : }","title":"module: bl64-os"},{"location":"bl64-os/#module-bl64-os","text":"","title":"module: bl64-os"},{"location":"bl64-os/#header","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 ####################################### # BashLib64 / OS / Identify OS attributes # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.2.0 ####################################### export BL64_OS_DISTRO export BL64_OS_CMD_AWK export BL64_OS_CMD_CAT export BL64_OS_CMD_CHMOD export BL64_OS_CMD_CHOWN export BL64_OS_CMD_CP export BL64_OS_CMD_CAT export BL64_OS_CMD_DATE export BL64_OS_CMD_HOSTNAME export BL64_OS_CMD_GREP export BL64_OS_CMD_ID export BL64_OS_CMD_LS export BL64_OS_CMD_MKDIR export BL64_OS_CMD_MKTEMP export BL64_OS_CMD_MV export BL64_OS_CMD_RM export BL64_OS_CMD_TAR export BL64_OS_CMD_USERADD export BL64_OS_ALIAS_CHOWN_DIR export BL64_OS_ALIAS_CP_FILE export BL64_OS_ALIAS_ID_USER export BL64_OS_ALIAS_LS_FILES export BL64_OS_ALIAS_MKDIR_FULL export BL64_OS_ALIAS_MV export BL64_OS_ALIAS_RM_FILE export BL64_OS_ALIAS_RM_FULL","title":"Header"},{"location":"bl64-os/#source-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 ####################################### # BashLib64 / OS / Identify OS attributes # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.2.0 ####################################### ####################################### # Identify and normalize Linux OS distribution name and version # # Arguments: # None # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: ok: always ok, even when unable to identify the platform ####################################### function bl64_os_get_distro () { BL64_OS_DISTRO = 'UNKNOWN' if [[ -r '/etc/os-release' ]] ; then # shellcheck disable=SC1091 source '/etc/os-release' if [[ -n \" $ID \" && -n \" $VERSION_ID \" ]] ; then BL64_OS_DISTRO = \" ${ ID ^^ } - ${ VERSION_ID } \" fi fi return 0 } ####################################### # Identify and normalize common *nix OS commands # Commands are exported as variables with full path # # Arguments: # None # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: always ok, even when the OS is not supported ####################################### function bl64_os_set_command () { if [[ \" $BL64_OS_DISTRO \" = ~ ( UBUNTU-.* | FEDORA-.* | CENTOS-.* | OL-.* | DEBIAN-.* ) ]] ; then BL64_OS_CMD_AWK = '/usr/bin/awk' BL64_OS_CMD_ID = '/usr/bin/id' BL64_OS_CMD_USERADD = '/usr/sbin/useradd' BL64_OS_CMD_TAR = '/bin/tar' fi if [[ \" $BL64_OS_DISTRO \" = ~ ( UBUNTU-.* | DEBIAN-.* ) ]] ; then BL64_OS_CMD_CAT = '/bin/cat' BL64_OS_CMD_CHMOD = '/bin/chmod' BL64_OS_CMD_CHOWN = '/bin/chown' BL64_OS_CMD_CP = '/bin/cp' BL64_OS_CMD_DATE = \"/bin/date\" BL64_OS_CMD_GREP = '/bin/grep' BL64_OS_CMD_HOSTNAME = '/bin/hostname' BL64_OS_CMD_LS = '/bin/ls' BL64_OS_CMD_MKDIR = '/bin/mkdir' BL64_OS_CMD_MKTEMP = '/bin/mktemp' BL64_OS_CMD_MV = '/bin/mv' BL64_OS_CMD_RM = '/bin/rm' fi if [[ \" $BL64_OS_DISTRO \" = ~ ( FEDORA-.* | CENTOS-.* | OL-.* ) ]] ; then BL64_OS_CMD_CAT = '/usr/bin/cat' BL64_OS_CMD_CHMOD = '/usr/bin/chmod' BL64_OS_CMD_CHOWN = '/usr/bin/chown' BL64_OS_CMD_CP = '/usr/bin/cp' BL64_OS_CMD_DATE = \"/usr/bin/date\" BL64_OS_CMD_GREP = '/usr/bin/grep' BL64_OS_CMD_HOSTNAME = '/usr/bin/hostname' BL64_OS_CMD_LS = '/usr/bin/ls' BL64_OS_CMD_MKDIR = '/usr/bin/mkdir' BL64_OS_CMD_MKTEMP = '/usr/bin/mktemp' BL64_OS_CMD_MV = '/usr/bin/mv' BL64_OS_CMD_RM = '/usr/bin/rm' fi return 0 } ####################################### # Create command aliases for common use cases # Aliases are presented as regular shell variables for easy inclusion in SUDO # Use the alias without quotes, otherwise the shell will interprete spaces as part of the command # # Arguments: # None # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: always ok ####################################### function bl64_os_set_alias () { BL64_OS_ALIAS_CHOWN_DIR = \" $BL64_OS_CMD_CHOWN --verbose --recursive\" BL64_OS_ALIAS_CP_FILE = \" $BL64_OS_CMD_CP --verbose --force\" BL64_OS_ALIAS_ID_USER = \" $BL64_OS_CMD_ID -u -n\" BL64_OS_ALIAS_LS_FILES = \" $BL64_OS_CMD_LS --color=never\" BL64_OS_ALIAS_MKDIR_FULL = \" $BL64_OS_CMD_MKDIR --parents --verbose\" BL64_OS_ALIAS_MV = \" $BL64_OS_CMD_MV --force --verbose\" BL64_OS_ALIAS_RM_FILE = \" $BL64_OS_CMD_RM --verbose --force --one-file-system\" BL64_OS_ALIAS_RM_FULL = \" $BL64_OS_CMD_RM --verbose --force --one-file-system --recursive\" } ####################################### # Remove content from OS temporary repositories # # Arguments: # None # Outputs: # STDOUT: output from the rm command # STDERR: output from the rm command # Returns: # 0: always ok ####################################### function bl64_os_cleanup_tmps () { $BL64_OS_ALIAS_RM_FILE -- /tmp/* $BL64_OS_ALIAS_RM_FILE -- /var/tmp/* : } ####################################### # Remove or reset logs from standard locations # # Arguments: # None # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: always ok ####################################### function bl64_os_cleanup_logs () { : } ####################################### # Remove or reset caches from standard locations # # Arguments: # None # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: always ok ####################################### function bl64_os_cleanup_caches () { : } ####################################### # Performs a complete cleanup of the OS # # * Removes temporary files # * Cleans caches # * Removes or resets logs # # Arguments: # None # Outputs: # STDOUT: output from clean functions # STDERR: output from clean functions # Returns: # 0: always ok ####################################### function bl64_os_cleanup_full () { bl64_pkg_cleanup bl64_os_cleanup_tmps bl64_os_cleanup_logs bl64_os_cleanup_caches : }","title":"Source Code"},{"location":"bl64-pkg/","text":"module: bl64-pkg \u00b6 Header \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ####################################### # BashLib64 / Install native OS packages # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.0 ####################################### readonly BL64_PKG_CMD_APT = '/usr/bin/apt-get' readonly BL64_PKG_CMD_DNF = '/usr/bin/dnf' readonly BL64_PKG_CMD_YUM = '/usr/bin/yum' readonly BL64_PKG_ALIAS_APT_UPDATE = \" $BL64_PKG_CMD_APT update\" readonly BL64_PKG_ALIAS_APT_INSTALL = \" $BL64_PKG_CMD_APT --assume-yes install\" readonly BL64_PKG_ALIAS_APT_CLEAN = \" $BL64_PKG_CMD_APT clean\" readonly BL64_PKG_ALIAS_DNF_CACHE = \" $BL64_PKG_CMD_DNF --color=never makecache\" readonly BL64_PKG_ALIAS_DNF_INSTALL = \" $BL64_PKG_CMD_DNF --color=never --nodocs --assumeyes install\" readonly BL64_PKG_ALIAS_DNF_CLEAN = \" $BL64_PKG_CMD_DNF clean all\" Source Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 ####################################### # BashLib64 / Install native OS packages # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.1 ####################################### ####################################### # Initialize the package manager for installations # # Arguments: # None # Outputs: # STDOUT: None # STDERR: error from package manager # Returns: # package manager exist status ####################################### function bl64_pkg_prepare () { export LC_ALL = \"C\" case \" $BL64_OS_DISTRO \" in UBUNTU-* | DEBIAN-* ) export DEBIAN_FRONTEND = \"noninteractive\" $BL64_PKG_ALIAS_APT_UPDATE ;; FEDORA-* | CENTOS-* | OL-* ) $BL64_PKG_ALIAS_DNF_CACHE ;; esac } ####################################### # Install packages # # Arguments: # package list, separated by spaces (expanded with $@) # Outputs: # STDOUT: None # STDERR: error from package manager # Returns: # package manager exist status ####################################### function bl64_pkg_install () { export LC_ALL = \"C\" case \" $BL64_OS_DISTRO \" in UBUNTU-* | DEBIAN-* ) export DEBIAN_FRONTEND = \"noninteractive\" $BL64_PKG_ALIAS_APT_INSTALL -- \" $@ \" ;; FEDORA-* | CENTOS-* | OL-* ) $BL64_PKG_ALIAS_DNF_INSTALL -- \" $@ \" ;; esac } ####################################### # Clean up the package manager run-time environment # # Arguments: # None # Outputs: # STDOUT: None # STDERR: error from package manager # Returns: # package manager exist status ####################################### function bl64_pkg_cleanup () { export LC_ALL = \"C\" case \" $BL64_OS_DISTRO \" in UBUNTU-* | DEBIAN-* ) export DEBIAN_FRONTEND = \"noninteractive\" $BL64_PKG_ALIAS_APT_CLEAN ;; FEDORA-* | CENTOS-* | OL-* ) $BL64_PKG_ALIAS_DNF_CLEAN ;; esac }","title":"module: bl64-pkg"},{"location":"bl64-pkg/#module-bl64-pkg","text":"","title":"module: bl64-pkg"},{"location":"bl64-pkg/#header","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ####################################### # BashLib64 / Install native OS packages # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.0 ####################################### readonly BL64_PKG_CMD_APT = '/usr/bin/apt-get' readonly BL64_PKG_CMD_DNF = '/usr/bin/dnf' readonly BL64_PKG_CMD_YUM = '/usr/bin/yum' readonly BL64_PKG_ALIAS_APT_UPDATE = \" $BL64_PKG_CMD_APT update\" readonly BL64_PKG_ALIAS_APT_INSTALL = \" $BL64_PKG_CMD_APT --assume-yes install\" readonly BL64_PKG_ALIAS_APT_CLEAN = \" $BL64_PKG_CMD_APT clean\" readonly BL64_PKG_ALIAS_DNF_CACHE = \" $BL64_PKG_CMD_DNF --color=never makecache\" readonly BL64_PKG_ALIAS_DNF_INSTALL = \" $BL64_PKG_CMD_DNF --color=never --nodocs --assumeyes install\" readonly BL64_PKG_ALIAS_DNF_CLEAN = \" $BL64_PKG_CMD_DNF clean all\"","title":"Header"},{"location":"bl64-pkg/#source-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 ####################################### # BashLib64 / Install native OS packages # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.1 ####################################### ####################################### # Initialize the package manager for installations # # Arguments: # None # Outputs: # STDOUT: None # STDERR: error from package manager # Returns: # package manager exist status ####################################### function bl64_pkg_prepare () { export LC_ALL = \"C\" case \" $BL64_OS_DISTRO \" in UBUNTU-* | DEBIAN-* ) export DEBIAN_FRONTEND = \"noninteractive\" $BL64_PKG_ALIAS_APT_UPDATE ;; FEDORA-* | CENTOS-* | OL-* ) $BL64_PKG_ALIAS_DNF_CACHE ;; esac } ####################################### # Install packages # # Arguments: # package list, separated by spaces (expanded with $@) # Outputs: # STDOUT: None # STDERR: error from package manager # Returns: # package manager exist status ####################################### function bl64_pkg_install () { export LC_ALL = \"C\" case \" $BL64_OS_DISTRO \" in UBUNTU-* | DEBIAN-* ) export DEBIAN_FRONTEND = \"noninteractive\" $BL64_PKG_ALIAS_APT_INSTALL -- \" $@ \" ;; FEDORA-* | CENTOS-* | OL-* ) $BL64_PKG_ALIAS_DNF_INSTALL -- \" $@ \" ;; esac } ####################################### # Clean up the package manager run-time environment # # Arguments: # None # Outputs: # STDOUT: None # STDERR: error from package manager # Returns: # package manager exist status ####################################### function bl64_pkg_cleanup () { export LC_ALL = \"C\" case \" $BL64_OS_DISTRO \" in UBUNTU-* | DEBIAN-* ) export DEBIAN_FRONTEND = \"noninteractive\" $BL64_PKG_ALIAS_APT_CLEAN ;; FEDORA-* | CENTOS-* | OL-* ) $BL64_PKG_ALIAS_DNF_CLEAN ;; esac }","title":"Source Code"},{"location":"bl64-sudo/","text":"module: bl64-sudo \u00b6 Header \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ####################################### # BashLib64 / Manipulate sudo configuration # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.0 ####################################### readonly BL64_SUDO_CMD_SUDO = '/usr/bin/sudo' readonly BL64_SUDO_CMD_VISUDO = '/usr/sbin/visudo' readonly BL64_SUDO_FILE_SUDOERS = '/etc/sudoers' readonly BL64_SUDO_ERROR_MISSING_PARAMETER = 200 readonly BL64_SUDO_ERROR_MISSING_AWK = 201 readonly BL64_SUDO_ERROR_MISSING_SUDOERS = 202 readonly BL64_SUDO_ERROR_MISSING_VISUDO = 203 readonly BL64_SUDO_ERROR_UPDATE_FAILED = 210 readonly BL64_SUDO_ERROR_INVALID_SUDOERS = 211 readonly _BL64_SUDO_TXT_MISSING_PARAMETER = 'required parameter is missing' readonly _BL64_SUDO_TXT_INVALID_SUDOERS = 'the sudoers file is corrupt or invalid' export BL64_SUDO_ALIAS_SUDO_ENV Source Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 ####################################### # BashLib64 / Manipulate sudo configuration # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.0 ####################################### ####################################### # Add password-less root privilege # # Arguments: # $1: user name. User must already be present. # Outputs: # STDOUT: None # STDERR: execution errors # Returns: # 0: rule added # >0: failed command exit status # BL64_SUDO_ERROR_MISSING_PARAMETER # BL64_SUDO_ERROR_MISSING_SUDOERS # BL64_SUDO_ERROR_MISSING_AWK # BL64_SUDO_ERROR_UPDATE_FAILED # BL64_SUDO_ERROR_INVALID_SUDOERS ####################################### function bl64_sudo_add_root () { local user = \" $1 \" local status = $BL64_SUDO_ERROR_UPDATE_FAILED local new_sudoers = \" ${ BL64_SUDO_FILE_SUDOERS } .bl64_new\" local old_sudoers = \" ${ BL64_SUDO_FILE_SUDOERS } .bl64_old\" if [[ -z \" $user \" ]] ; then bl64_msg_show_error \" $_BL64_SUDO_TXT_MISSING_PARAMETER (user)\" # shellcheck disable=SC2086 return $BL64_SUDO_ERROR_MISSING_PARAMETER fi # shellcheck disable=SC2086 bl64_check_command \" $BL64_OS_CMD_AWK \" || return $BL64_SUDO_ERROR_MISSING_AWK # shellcheck disable=SC2086 bl64_check_file \" $BL64_SUDO_FILE_SUDOERS \" || return $BL64_SUDO_ERROR_MISSING_SUDOERS # shellcheck disable=SC2086 bl64_sudo_check_sudoers \" $BL64_SUDO_FILE_SUDOERS \" || return $BL64_SUDO_ERROR_INVALID_SUDOERS umask 0266 # shellcheck disable=SC2016 \" $BL64_OS_CMD_AWK \" -v ControlUsr = \" $user \" ' BEGIN { Found = 0 } ControlUsr \" ALL=(ALL) NOPASSWD: ALL\" == $0 { Found = 1 } { print $0 } END { if( Found == 0) { print( ControlUsr \" ALL=(ALL) NOPASSWD: ALL\" ) } }' \" $BL64_SUDO_FILE_SUDOERS \" > \" $new_sudoers \" if [[ -s \" $new_sudoers \" ]] ; then $BL64_OS_ALIAS_CP_FILE \" ${ BL64_SUDO_FILE_SUDOERS } \" \" $old_sudoers \" fi if [[ -s \" $new_sudoers \" && -s \" $old_sudoers \" ]] ; then \" $BL64_OS_CMD_CAT \" \" ${ BL64_SUDO_FILE_SUDOERS } .bl64_new\" > \" ${ BL64_SUDO_FILE_SUDOERS } \" && \\ bl64_sudo_check_sudoers \" $BL64_SUDO_FILE_SUDOERS \" status = $? fi return $status } ####################################### # Use visudo --check to validate sudoers file # # Arguments: # $1: full path to the sudoers file # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: sudoers sintax ok # BL64_SUDO_ERROR_MISSING_VISUDO # visudo exit status ####################################### function bl64_sudo_check_sudoers () { local sudoers = \" $1 \" local status = 0 # shellcheck disable=SC2086 bl64_check_command \" $BL64_SUDO_CMD_VISUDO \" || return $BL64_SUDO_ERROR_MISSING_VISUDO \" $BL64_SUDO_CMD_VISUDO \" \\ --check \\ --file \" $sudoers \" status = $? if (( status ! = 0 )) ; then bl64_msg_show_error \" $_BL64_SUDO_TXT_INVALID_SUDOERS ( $sudoers )\" fi return $status } ####################################### # Create command aliases for common use cases # Aliases are presented as regular shell variables for easy inclusion in complex commands # Use the alias without quotes, otherwise the shell will interprete spaces as part of the command # # Arguments: # None # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: always ok ####################################### function bl64_sudo_set_alias () { # shellcheck disable=SC2034 BL64_SUDO_ALIAS_SUDO_ENV = \" $BL64_SUDO_CMD_SUDO --preserve-env --set-home\" }","title":"module: bl64-sudo"},{"location":"bl64-sudo/#module-bl64-sudo","text":"","title":"module: bl64-sudo"},{"location":"bl64-sudo/#header","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ####################################### # BashLib64 / Manipulate sudo configuration # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.0 ####################################### readonly BL64_SUDO_CMD_SUDO = '/usr/bin/sudo' readonly BL64_SUDO_CMD_VISUDO = '/usr/sbin/visudo' readonly BL64_SUDO_FILE_SUDOERS = '/etc/sudoers' readonly BL64_SUDO_ERROR_MISSING_PARAMETER = 200 readonly BL64_SUDO_ERROR_MISSING_AWK = 201 readonly BL64_SUDO_ERROR_MISSING_SUDOERS = 202 readonly BL64_SUDO_ERROR_MISSING_VISUDO = 203 readonly BL64_SUDO_ERROR_UPDATE_FAILED = 210 readonly BL64_SUDO_ERROR_INVALID_SUDOERS = 211 readonly _BL64_SUDO_TXT_MISSING_PARAMETER = 'required parameter is missing' readonly _BL64_SUDO_TXT_INVALID_SUDOERS = 'the sudoers file is corrupt or invalid' export BL64_SUDO_ALIAS_SUDO_ENV","title":"Header"},{"location":"bl64-sudo/#source-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 ####################################### # BashLib64 / Manipulate sudo configuration # # Author: serdigital64 (https://github.com/serdigital64) # License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt) # Repository: https://github.com/serdigital64/bashlib64 # Version: 1.0.0 ####################################### ####################################### # Add password-less root privilege # # Arguments: # $1: user name. User must already be present. # Outputs: # STDOUT: None # STDERR: execution errors # Returns: # 0: rule added # >0: failed command exit status # BL64_SUDO_ERROR_MISSING_PARAMETER # BL64_SUDO_ERROR_MISSING_SUDOERS # BL64_SUDO_ERROR_MISSING_AWK # BL64_SUDO_ERROR_UPDATE_FAILED # BL64_SUDO_ERROR_INVALID_SUDOERS ####################################### function bl64_sudo_add_root () { local user = \" $1 \" local status = $BL64_SUDO_ERROR_UPDATE_FAILED local new_sudoers = \" ${ BL64_SUDO_FILE_SUDOERS } .bl64_new\" local old_sudoers = \" ${ BL64_SUDO_FILE_SUDOERS } .bl64_old\" if [[ -z \" $user \" ]] ; then bl64_msg_show_error \" $_BL64_SUDO_TXT_MISSING_PARAMETER (user)\" # shellcheck disable=SC2086 return $BL64_SUDO_ERROR_MISSING_PARAMETER fi # shellcheck disable=SC2086 bl64_check_command \" $BL64_OS_CMD_AWK \" || return $BL64_SUDO_ERROR_MISSING_AWK # shellcheck disable=SC2086 bl64_check_file \" $BL64_SUDO_FILE_SUDOERS \" || return $BL64_SUDO_ERROR_MISSING_SUDOERS # shellcheck disable=SC2086 bl64_sudo_check_sudoers \" $BL64_SUDO_FILE_SUDOERS \" || return $BL64_SUDO_ERROR_INVALID_SUDOERS umask 0266 # shellcheck disable=SC2016 \" $BL64_OS_CMD_AWK \" -v ControlUsr = \" $user \" ' BEGIN { Found = 0 } ControlUsr \" ALL=(ALL) NOPASSWD: ALL\" == $0 { Found = 1 } { print $0 } END { if( Found == 0) { print( ControlUsr \" ALL=(ALL) NOPASSWD: ALL\" ) } }' \" $BL64_SUDO_FILE_SUDOERS \" > \" $new_sudoers \" if [[ -s \" $new_sudoers \" ]] ; then $BL64_OS_ALIAS_CP_FILE \" ${ BL64_SUDO_FILE_SUDOERS } \" \" $old_sudoers \" fi if [[ -s \" $new_sudoers \" && -s \" $old_sudoers \" ]] ; then \" $BL64_OS_CMD_CAT \" \" ${ BL64_SUDO_FILE_SUDOERS } .bl64_new\" > \" ${ BL64_SUDO_FILE_SUDOERS } \" && \\ bl64_sudo_check_sudoers \" $BL64_SUDO_FILE_SUDOERS \" status = $? fi return $status } ####################################### # Use visudo --check to validate sudoers file # # Arguments: # $1: full path to the sudoers file # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: sudoers sintax ok # BL64_SUDO_ERROR_MISSING_VISUDO # visudo exit status ####################################### function bl64_sudo_check_sudoers () { local sudoers = \" $1 \" local status = 0 # shellcheck disable=SC2086 bl64_check_command \" $BL64_SUDO_CMD_VISUDO \" || return $BL64_SUDO_ERROR_MISSING_VISUDO \" $BL64_SUDO_CMD_VISUDO \" \\ --check \\ --file \" $sudoers \" status = $? if (( status ! = 0 )) ; then bl64_msg_show_error \" $_BL64_SUDO_TXT_INVALID_SUDOERS ( $sudoers )\" fi return $status } ####################################### # Create command aliases for common use cases # Aliases are presented as regular shell variables for easy inclusion in complex commands # Use the alias without quotes, otherwise the shell will interprete spaces as part of the command # # Arguments: # None # Outputs: # STDOUT: None # STDERR: None # Returns: # 0: always ok ####################################### function bl64_sudo_set_alias () { # shellcheck disable=SC2034 BL64_SUDO_ALIAS_SUDO_ENV = \" $BL64_SUDO_CMD_SUDO --preserve-env --set-home\" }","title":"Source Code"},{"location":"cod/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at serdigital64@gmail.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Contributor Covenant Code of Conduct"},{"location":"cod/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"cod/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"cod/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"cod/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"cod/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"cod/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at serdigital64@gmail.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"cod/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"cod/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"cod/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"cod/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"cod/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"cod/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Attribution"}]}