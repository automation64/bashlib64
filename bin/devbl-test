#!/usr/bin/env bash
#######################################
# Create the BashLib64 stand-alone distributable file
#
# Author: serdigital64 (https://github.com/serdigital64)
# License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt)
# Repository: https://github.com/serdigital64/bashlib64
# Version: 1.2.0
#######################################

[[ -z "$DEVBL_BIN" ]] && echo "Error: prepare the dev environment before executing this file" && exit 1
# shellcheck disable=SC1090
source "$DEVBL_BASHLIB64" || exit 1

function devbl_run_tests_bats() {

  local debug="$1"
  local case="$2"
  local target=''
  local verbose=''

  if [[ "$case" != 'all' ]]; then
    target="${DEVBL_TEST_BATSCORE}/${case}.bats"
  else
    target="$DEVBL_TEST_BATSCORE"
  fi

  if [[ "$debug" == '1' ]]; then
    verbose='--timing --trace --verbose-run'
  else
    verbose='--formatter tap'
  fi

  # shellcheck disable=SC2086
  "$DEVBL_CMD_BATS" $verbose "$target"

}

function devbl_run_tests_bats_container() {

  local debug="$1"
  local case="$2"
  local image="$3"
  local registry="$4"
  local container=''
  local target=''
  local verbose=''
  local loglevel=''

  [[ -z "$image" ]] && bl64_msg_show_error "missing parameter (image)" && return 1

  if [[ "$case" != 'all' ]]; then
    target="/test/batscore/${case}.bats"
  else
    target="/test/batscore"
  fi

  if [[ "$debug" == '1' ]]; then
    verbose='--timing --trace --verbose-run'
    loglevel='--log-level=debug'
  else
    verbose='--formatter tap'
    loglevel=''
  fi

  IFS=' '
  for container in $image; do
    unset IFS
    bl64_msg_show_task "run test cases on the container image: $container"
    # shellcheck disable=SC2086
    "$DEVBL_CMD_PODMAN" \
      $loglevel \
      run \
      --rm \
      --user "$DEVBL_TEST_USR" \
      --env DEVBL_TEST='/test' \
      --env DEVBL_SAMPLES='/test/samples' \
      --env DEVBL_TEST_BASHLIB64='/test/lib/bashlib64.bash' \
      --env DEVBL_BATS_HELPER="$DEVBL_BATS_HELPER" \
      --volume "${DEVBL_TEST}:/test" \
      "${registry}/${container}" \
      $verbose \
      "$target"
  done

}

function devbl_list_images() {
  echo "$DEVBL_IMAGES"
}

function devbl_list_cases() {
  "$BL64_OS_CMD_LS" "$DEVBL_TEST_BATSCORE"
}

function devbl_run_tests_check() {

  bl64_check_command "$DEVBL_CMD_BATS" || return 1
  :

}

function devbl_run_tests_help() {
  bl64_msg_show_usage \
    '<-b|-o|-l|-i> [-c Case] [-e Image] [-r Registry] [-g] [-h]' \
    'Run Tests' \
    '
  -b         : Run tests
  -o         : Run tests in containers
  -l         : List test cases
  -i         : List container images
    ' '
  -g         : Enable debug mode to show detailed execution information
  -h         : Show Help
    ' "
  -c Case    : Test case name. If not specified all cases are run
  -e Image   : Image name to use for running the container test
  -r Registry: Registry URL where the container image is. Default: ${DEVBL_REGISTRY}
    "
}

#
# Main
#

declare devbl_run_tests_status=1
declare devbl_run_tests_command=''
declare devbl_run_tests_command_tag=''
declare devbl_run_tests_option=''
declare devbl_run_tests_case='all'
declare devbl_run_tests_image="$DEVBL_IMAGES"
declare devbl_run_tests_debug='0'
declare devbl_run_tests_registry="$DEVBL_REGISTRY"

(($# == 0)) && devbl_run_tests_help && exit 1
while getopts ':blioc:e:r:gh' devbl_run_tests_option; do
  case "$devbl_run_tests_option" in
  b)
    devbl_run_tests_command='devbl_run_tests_bats'
    devbl_run_tests_command_tag='run bats-core tests'
    ;;
  o)
    devbl_run_tests_command='devbl_run_tests_bats_container'
    devbl_run_tests_command_tag='run bats-core tests in containers'
    ;;
  l)
    devbl_run_tests_command='devbl_list_cases'
    devbl_run_tests_command_tag='list test cases'
    ;;
  i)
    devbl_run_tests_command='devbl_list_images'
    devbl_run_tests_command_tag='list container images'
    ;;
  c) devbl_run_tests_case="$OPTARG" ;;
  e) devbl_run_tests_image="$OPTARG" ;;
  r) devbl_run_tests_registry="$OPTARG" ;;
  g) devbl_run_tests_debug='1' ;;
  h) devbl_run_tests_help && exit ;;
  \?) devbl_run_tests_help && exit 1 ;;
  esac
done
[[ -z "$devbl_run_tests_command" ]] && devbl_run_tests_help && exit 1
devbl_run_tests_check || exit 1

bl64_msg_show_batch_start "$devbl_run_tests_command_tag"
case "$devbl_run_tests_command" in
'devbl_list_cases' | 'devbl_list_images') "$devbl_run_tests_command" ;;
'devbl_run_tests_bats') "$devbl_run_tests_command" "$devbl_run_tests_debug" "$devbl_run_tests_case" ;;
'devbl_run_tests_bats_container') "$devbl_run_tests_command" "$devbl_run_tests_debug" "$devbl_run_tests_case" "$devbl_run_tests_image" "$devbl_run_tests_registry" ;;
esac
devbl_run_tests_status=$?

bl64_msg_show_batch_finish $devbl_run_tests_status "$devbl_run_tests_command_tag"
exit $devbl_run_tests_status
