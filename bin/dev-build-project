#!/usr/bin/env bash
#
# Dev / Build / Project / Build application
#
# * Version: 4.0.0
# * Template: 2.0.0
#

#
# Imports
#

# shellcheck source=bin/dev-set
source ./bin/dev-set || { echo 'dev-set:Error: unable to load dev environment' 2>&1 && exit 1; }
# shellcheck source-path=bin
source ./bin/dev-env-project || exit 1
# shellcheck source-path=lib/bl64
source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-txt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fmt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fs.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-core.bash" || exit 1

#
# Globals
#

declare _BUILD_SA="${DEV_PATH_BUILD_PREPARE}/${DEV_PACK_PROJECT_ASSETS_SA}"
declare _BUILD_CORE="${DEV_PATH_BUILD_PREPARE}/${DEV_PACK_PROJECT_ASSETS_CORE}"
declare _BUILD_OPT="${DEV_PATH_BUILD_PREPARE}/${DEV_PACK_PROJECT_ASSETS_OPT}"
declare _BUILD_MODULE_CORE="${DEV_PATH_BUILD_PREPARE}/${DEV_PACK_PROJECT_ASSETS_MODULE_CORE}"

#
# Functions
#

function dev_build_merge_main() {
  bl64_msg_show_task 'adding main'
  # shellcheck disable=SC2119
  { "$BL64_OS_CMD_CAT" "bl64-lib-main.bash" && bl64_fmt_separator_line; } >>"$_BUILD_SA" &&
    { "$BL64_OS_CMD_CAT" "bl64-lib-main.bash" && bl64_fmt_separator_line; } >>"$_BUILD_CORE" &&
    { "$BL64_OS_CMD_CAT" "bl64-lib-main.bash" && bl64_fmt_separator_line; } >>"$_BUILD_MODULE_CORE" &&
    bl64_fs_run_chmod '0755' \
      "$_BUILD_SA" \
      "$_BUILD_MODULE_CORE" \
      "$_BUILD_CORE" \
      "$_BUILD_OPT" ||
    return $?
}

function dev_build_merge_module() {
  bl64_dbg_lib_show_function "$@"
  local destination="$1"
  local modules="$2"
  local file=''

  # shellcheck disable=SC2119
  for file in $modules; do
    [[ ! -f "bl64-${file}-env.bash" ]] && continue
    { "$BL64_OS_CMD_CAT" "bl64-${file}-env.bash" && bl64_fmt_separator_line; } >>"$destination" ||
      return $?
  done

  # shellcheck disable=SC2119
  for file in $modules; do
    {
      [[ -f "bl64-${file}-setup.bash" ]] && "$BL64_OS_CMD_CAT" "bl64-${file}-setup.bash" && bl64_fmt_separator_line
      "$BL64_OS_CMD_CAT" "bl64-${file}.bash" && bl64_fmt_separator_line
    } >>"$destination" ||
      return $?
  done
}

function dev_build_create_modules() {
  bl64_dbg_lib_show_function
  local build_module=''
  local module_name=''

  bl64_msg_show_task 'adding modules'
  dev_build_merge_module "$_BUILD_SA" "${DEV_ENV_PROJECT_MODULES_CORE} ${DEV_ENV_PROJECT_MODULES_OPT}" &&
    dev_build_merge_module "$_BUILD_CORE" "$DEV_ENV_PROJECT_MODULES_CORE" &&
    dev_build_merge_module "$_BUILD_OPT" "$DEV_ENV_PROJECT_MODULES_OPT" ||
    return $?

  for module_name in ${DEV_ENV_PROJECT_MODULES_CORE} ${DEV_ENV_PROJECT_MODULES_OPT}; do
    build_module="${DEV_PATH_BUILD_PREPARE}/${DEV_PACK_PROJECT_ASSETS_MODULE}-${module_name}.bash"
    dev_build_merge_module "${build_module}.tmp" "$module_name"
    {
      "$BL64_OS_CMD_CAT" 'bl64-lib-header.bash' &&
        bl64_fmt_separator_line &&
        "$BL64_OS_CMD_CAT" "${build_module}.tmp"
    } >"$build_module" &&
      bl64_fs_run_chmod '0755' "$build_module" ||
      return $?
    bl64_fs_path_remove "${build_module}.tmp"
  done
}

function dev_build_merge_core() {
  bl64_dbg_lib_show_function
  "$BL64_OS_CMD_CAT" "bl64-lib-header.bash" &&
    bl64_fmt_separator_line &&
    "$BL64_OS_CMD_CAT" "bl64-lib-bootstrap.bash" &&
    bl64_fmt_separator_line &&
    "$BL64_OS_CMD_CAT" "bl64-lib-env.bash" &&
    "$BL64_OS_CMD_CAT" "bl64-lib.bash"
}

function dev_build_create_header() {
  # Create header
  bl64_msg_show_task 'creating library header'
  # shellcheck disable=SC2119
  dev_build_merge_core >"$_BUILD_SA" &&
    bl64_fs_cp_file "$_BUILD_SA" "$_BUILD_CORE" &&
    bl64_fs_cp_file "$_BUILD_SA" "$_BUILD_MODULE_CORE" ||
    return $?
  # shellcheck disable=SC2119
  {
    "$BL64_OS_CMD_CAT" "bl64-lib-header.bash" && bl64_fmt_separator_line
  } >"$_BUILD_OPT" || return 1
}

function dev_build() {
  bl64_dbg_app_show_function
  cd "$DEV_PATH_SRC" &&
    dev_build_create_header &&
    dev_build_create_modules
}

function dev_build_initialize() {
  bl64_dbg_app_show_function
  bl64_fs_dir_reset \
    "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$DEV_PATH_BUILD_PREPARE"
}

#
# Main
#

[[ -n "$DEV_CICD_DEBUG" ]] && bl64_dbg_all_enable

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start 'dev-build-project'
dev_build_initialize &&
  dev_build
bl64_msg_show_batch_finish $? 'dev-build-project'
