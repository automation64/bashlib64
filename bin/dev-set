#!/usr/bin/env bash
#######################################
# Dev / Set
#
# * Loads DevBin64 environment variables
# * To be used by DevBin64 scripts
# * Warning: Bash is the only supported shell. Other shells may work as long as they are compatible with Bash syntax
# * Version: 10.1.0
#
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################


#
# Parameters
#

# Main / Debug flag for bin/ scripts
export DEV_CICD_DEBUG="${DEV_CICD_DEBUG:-}"
[[ -n "$DEV_CICD_DEBUG" ]] && set -x

# Main / Verbose format (BL64_MSG_FORMAT_*)
export DEV_VERBOSE="${DEV_VERBOSE:-FULL}"

# Main / Profile
export DEV_PROFILE="${DEV_PROFILE:-}"

# Main / List of modules to load
export DEV_MODULE_LOAD=''

#
# External
#

# From CICD products
export GITHUB_WORKSPACE="${GITHUB_WORKSPACE:-}"
export GITLAB_CI="${GITLAB_CI:-}"
export TESTMANSH_PROJECT_ROOT="${TESTMANSH_PROJECT_ROOT:-}"

#
# Constants
#

# Main / Bootstrap files. Must be the same as defined in .env
declare DEV_BOOTSTRAP_STATE='.devbin64'

# Main / Base file and directory names
export DEV_BASE_BUILD="build"
export DEV_BASE_CHANGELOG="CHANGELOG.md"
export DEV_BASE_DOT_ENV="dot.dev.env"
export DEV_BASE_DOT_LOCAL="dot.local.env"
export DEV_BASE_DOT_SECRETS="dot.secrets.env"
export DEV_BASE_ENV=".dev.env"
export DEV_BASE_GITKEEP=".gitkeep"
export DEV_BASE_LOCAL='.local-github.env'
export DEV_BASE_LOCAL=".local.env"
export DEV_BASE_POST=".post.env"
export DEV_BASE_PROFILE="prof"
export DEV_BASE_SECRETS=".secrets.env"
export DEV_BASE_SRC="src"
export DEV_BASE_TEST="test"

#
# Paths
#

# Main / Project root
export DEV_PATH_ROOT=''

# Main / Project source code
export DEV_PATH_SRC=''

# Main / Project test code
export DEV_PATH_TEST=''

# Main / Project configuration files
export DEV_PATH_ETC=''

# Main / Project documentation
export DEV_PATH_DOCS=''

# Main / DevOps scripts
export DEV_PATH_BIN=''

# Main / DevOps persistent data
export DEV_PATH_VAR=''

# Main / DevOps ephemeral tools. Content excluded from GIT
export DEV_PATH_LIB=''

# Main / DevOps builds. Content excluded from GIT
export DEV_PATH_BUILD=''
export DEV_PATH_BUILD_PREPARE=''
export DEV_PATH_BUILD_STAGING=''
export DEV_PATH_BUILD_PACK=''

# Main / DevOps local vault for secrets. Content excluded from GIT
export DEV_PATH_VAULT=''

# Main / DevOps logs store. Content excluded from GIT
export DEV_PATH_LOGS=''

# Main / DevOps ephemeral data. Content excluded from GIT
export DEV_PATH_TMP=''

# Main / Profile dependant variables
export DEV_PATH_PROF_BUILD=''
export DEV_PATH_PROF_BUILD_PREPARE=''
export DEV_PATH_PROF_BUILD_STAGING=''
export DEV_PATH_PROF_BUILD_PACK=''
export DEV_PATH_PROF_ETC=''
export DEV_PATH_PROF_LOGS=''
export DEV_PATH_PROF_TMP=''
export DEV_PATH_PROF_VAR=''
export DEV_PATH_PROF_VAULT=''

#
# Public Functions
#

function db64_profile_check_disabled() {
  ! db64_profile_is_set && ! db64_profile_is_enabled && return 0

  db64_profile_is_set &&
    db64_msg_show_error 'Profile must be disabled for this task. Set the variable DEV_PROFILE to "none" and retry.'

  db64_profile_is_enabled &&
    db64_msg_show_error 'Profile is not supported for this task.'

  return 1
}

function db64_profile_check_set() {
  db64_profile_is_set && return 0

  db64_msg_show_error 'Profile is not set. Please set the DEV_PROFILE variable to a valid profile name.'
  return 1
}

function db64_profile_is_enabled() {
  [[ -d "${DEV_PATH_ETC}/${DEV_BASE_PROFILE}" ]]
}

function db64_profile_is_set() {
  [[ -n "$DEV_PROFILE" && "$DEV_PROFILE" != 'none' ]]
}

function db64_msg_show_warning() {
  local msg="$1"
  echo "db64:Warning: ${msg}" 2>&1
}

function db64_msg_show_error() {
  local msg="$1"
  echo "db64:Error: ${msg}" 2>&1
}

function db64_msg_show_task() {
  local msg="$1"
  [[ -n "$DEV_CICD_DEBUG" ]] && echo "db64:Task: ${msg}"
  return 0
}

function db64_msg_show_legacy() {
  local msg="$1"
  echo "db64:Legacy: legacy content detected. Please re-run devbin64 to upgrade the latest repository structure (${msg})" 2>&1
}

#
# Internal Functions
#

function _dev_set_define_paths() {
  db64_msg_show_task 'set project paths'
  DEV_PATH_SRC="${DEV_PATH_ROOT}/${DEV_BASE_SRC}"
  DEV_PATH_TEST="${DEV_PATH_ROOT}/${DEV_BASE_TEST}"
  DEV_PATH_ETC="${DEV_PATH_ROOT}/etc"
  DEV_PATH_DOCS="${DEV_PATH_ROOT}/docs"
  DEV_PATH_BIN="${DEV_PATH_ROOT}/bin"
  DEV_PATH_VAR="${DEV_PATH_ROOT}/var"
  DEV_PATH_LIB="${DEV_PATH_ROOT}/lib"
  DEV_PATH_BUILD="${DEV_PATH_ROOT}/${DEV_BASE_BUILD}"
  DEV_PATH_BUILD_PREPARE="${DEV_PATH_BUILD}/prepare"
  DEV_PATH_BUILD_STAGING="${DEV_PATH_BUILD}/staging"
  DEV_PATH_BUILD_PACK="${DEV_PATH_BUILD}/pack"
  DEV_PATH_VAULT="${DEV_PATH_ROOT}/vault"
  DEV_PATH_LOGS="${DEV_PATH_ROOT}/logs"
  DEV_PATH_TMP="${DEV_PATH_ROOT}/tmp"
}

function _dev_set_load_profile() {
  local source_file=''
  if ! db64_profile_is_set; then
    DEV_PATH_PROF_BUILD="${DEV_PATH_BUILD}"
    DEV_PATH_PROF_BUILD_PREPARE="${DEV_PATH_BUILD_PREPARE}"
    DEV_PATH_PROF_BUILD_STAGING="${DEV_PATH_BUILD_STAGING}"
    DEV_PATH_PROF_BUILD_PACK="${DEV_PATH_BUILD_PACK}"
    DEV_PATH_PROF_ETC="${DEV_PATH_ETC}"
    DEV_PATH_PROF_LOGS="${DEV_PATH_LOGS}"
    DEV_PATH_PROF_TMP="${DEV_PATH_TMP}"
    DEV_PATH_PROF_VAR="${DEV_PATH_VAR}"
    DEV_PATH_PROF_VAULT="${DEV_PATH_VAULT}"
  else
    DEV_PATH_PROF_BUILD="${DEV_PATH_BUILD}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
    DEV_PATH_PROF_BUILD_PREPARE="${DEV_PATH_BUILD}/${DEV_BASE_PROFILE}/${DEV_PROFILE}/prepare"
    DEV_PATH_PROF_BUILD_STAGING="${DEV_PATH_BUILD}/${DEV_BASE_PROFILE}/${DEV_PROFILE}/staging"
    DEV_PATH_PROF_BUILD_PACK="${DEV_PATH_BUILD}/${DEV_BASE_PROFILE}/${DEV_PROFILE}/pack"
    DEV_PATH_PROF_ETC="${DEV_PATH_ETC}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
    DEV_PATH_PROF_LOGS="${DEV_PATH_LOGS}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
    DEV_PATH_PROF_TMP="${DEV_PATH_TMP}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
    DEV_PATH_PROF_VAR="${DEV_PATH_VAR}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
    DEV_PATH_PROF_VAULT="${DEV_PATH_VAULT}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"

    source_file="${DEV_PATH_PROF_VAR}/${DEV_BASE_LOCAL}"
    if [[ -r "$source_file" ]]; then
      db64_msg_show_task "load profile local variables (${DEV_BASE_LOCAL})"
      # shellcheck disable=SC1090
      source "$source_file" ||
        { db64_msg_show_error "unable to load source file (${source_file})" && return 1; }
    fi
    source_file="${DEV_PATH_PROF_ETC}/${DEV_BASE_ENV}"
    if [[ -r "$source_file" ]]; then
      db64_msg_show_task "load profile variables (${DEV_BASE_ENV})"
      # shellcheck disable=SC1090
      source "$source_file" ||
        { db64_msg_show_error "unable to load source file (${source_file})" && return 1; }
    fi
  fi
}

function _dev_set_load_workstation() {
  db64_msg_show_task 'set project root (DEV_PATH_ROOT)'
  local file=''
  DEV_PATH_ROOT="${DEV_PATH_ROOT:-$(pwd)}"

  file="${DEV_PATH_ROOT}/${DEV_BASE_LOCAL}"
  if [[ -r "$file" ]]; then
    db64_msg_show_task "load local environment variables (${DEV_BASE_LOCAL})"
    # shellcheck source=./.local.env
    source "$file" ||
      { db64_msg_show_error "unable to source file (${file})" && return 1; }
  fi
  return 0
}

function _dev_set_load_gitlab() {
  # shellcheck disable=SC2154
  db64_msg_show_task "Info: GitLab detected, setting project root (${CI_PROJECT_DIR})"
  # shellcheck disable=SC2155
  DEV_PATH_ROOT="$CI_PROJECT_DIR"
}

function _dev_set_load_local_post() {
  local file=''
  file="${DEV_PATH_ROOT}/${DEV_BASE_POST}"
  if [[ -r "$file" ]]; then
    db64_msg_show_task "load project environment variables (${DEV_BASE_POST})"
    # shellcheck source=./.post.env
    source "${file}" ||
      { db64_msg_show_error "unable to source file (${file})" && return 1; }
  fi
  return 0
}

function _dev_set_load_github() {
  db64_msg_show_task "Info: GitHub detected, setting project root (${GITHUB_WORKSPACE})"
  # shellcheck disable=SC2155
  DEV_PATH_ROOT="$GITHUB_WORKSPACE"

  DEV_BASE_LOCAL="${DEV_PATH_ROOT}/${DEV_BASE_LOCAL}"
  if [[ -r "$DEV_BASE_LOCAL" ]]; then
    db64_msg_show_task "Load local github automatic environment variables (${DEV_BASE_LOCAL})"
    # shellcheck source=./.local-github.env
    source "${DEV_BASE_LOCAL}" ||
      { db64_msg_show_error "unable to source file (${DEV_BASE_LOCAL})" && return 1; }
  fi
  return 0
}

function _dev_set_load_testmansh() {
  db64_msg_show_task "Info: testmansh container detected, setting project root (${TESTMANSH_PROJECT_ROOT})"
  DEV_PATH_ROOT="$TESTMANSH_PROJECT_ROOT"
}

function _dev_set_load_env() {
  db64_msg_show_task "load project environment variables (${DEV_BASE_ENV})"
  # shellcheck source=./.env
  source "${DEV_PATH_ROOT}/${DEV_BASE_ENV}" ||
    { db64_msg_show_error "unable to read environment variables (${DEV_PATH_ROOT}/${DEV_BASE_ENV})" && return 1; }
  return 0
}

# shellcheck source-path=./bin
function _dev_set_load_modules() {
  local module_name=''
  local module_env=''

  # Load mandatory base modules, based on dependency order
  source "${DEV_PATH_BIN}/dev-env-bashlib64" &&
    source "${DEV_PATH_BIN}/dev-env-installer64" ||
    { db64_msg_show_error "unable to load environment core modules" && return 1; }

  # Warning: no using direct var expansion to avoid compatibility issues with ZSH
  for module_name in $(echo "$DEV_MODULE_LOAD"); do
    module_env="${DEV_PATH_BIN}/dev-env-${module_name}"
    db64_msg_show_task "load module environment variables (${module_env})"
    source "$module_env" ||
      { db64_msg_show_error "unable to load environment variables from file (${module_env})" && return 1; }
  done
  return 0
}

function _dev_set_load_local() {
  if [[ -n "$GITHUB_WORKSPACE" ]]; then
    _dev_set_load_github
  elif [[ -n "$GITLAB_CI" ]]; then
    _dev_set_load_gitlab
  elif [[ -n "$TESTMANSH_PROJECT_ROOT" ]]; then
    _dev_set_load_testmansh
  else
    _dev_set_load_workstation
  fi

  if [[ -z "$DEV_PATH_ROOT" ]]; then
    db64_msg_show_error 'unable to identify current repository location. Check that the variable DEV_PATH_ROOT is correctly set' &&
      return 1
  fi

  if [[ -z "$DEV_PROFILE" ]]; then
    DEV_PROFILE='none'
  fi
}

function _dev_set_load_secrets() {
  local file=''
  file="${DEV_PATH_VAULT}/${DEV_BASE_SECRETS}"
  if [[ -r "$file" ]]; then
    db64_msg_show_task "load local secrets (${DEV_BASE_SECRETS})"
    # shellcheck source=./.secrets.env
    source "$file" ||
      { db64_msg_show_error "unable to source file (${file})" && return 1; }
  fi

  [[ "$file" == "${DEV_PATH_PROF_VAULT}/${DEV_BASE_SECRETS}" ]] && return 0
  file="${DEV_PATH_PROF_VAULT}/${DEV_BASE_SECRETS}"
  if [[ -r "$file" ]]; then
    db64_msg_show_task "load profile secrets (${DEV_BASE_SECRETS})"
    # shellcheck disable=SC1090
    source "$file" ||
      { db64_msg_show_error "unable to load source file (${file})" && return 1; }
  fi

}

function _dev_set_initialize() {
  if [[ ! -f "./${DEV_BOOTSTRAP_STATE}" ]]; then
    db64_msg_show_error 'the command must be run from the repository root' &&
      return 1
  fi
}

function _dev_set_cleanup() {

  db64_msg_show_task 'cleanup unsed external variables'
  [[ -z "$GITHUB_WORKSPACE" ]] && unset GITHUB_WORKSPACE 
  [[ -z "$GITLAB_CI" ]] && unset GITLAB_CI 
  [[ -z "$TESTMANSH_PROJECT_ROOT" ]] && unset TESTMANSH_PROJECT_ROOT 

  db64_msg_show_task 'cleanup internal functions'
  unset _dev_set_define_paths
    unset _dev_set_initialize
    unset _dev_set_load_env
    unset _dev_set_legacy
    unset _dev_set_load_local
    unset _dev_set_load_local_post
    unset _dev_set_load_modules
    unset _dev_set_load_profile
    unset _dev_set_load_secrets
    unset _dev_set_load_testmansh
    unset _dev_set_load_workstation
    unset _dev_set_load_github
}

function _dev_set_legacy() {
  local file=''

  file="${DEV_PATH_ROOT}/.env"
  [[ -f "$file" ]] && db64_msg_show_legacy "${file}"

  file="${DEV_PATH_ROOT}/dot.env"
  [[ -f "$file" ]] && db64_msg_show_legacy "${file}"

  file="${DEV_PATH_ROOT}/${DEV_BASE_SECRETS}"
  [[ -f "$file" ]] && db64_msg_show_legacy "${file}"

  return 0
}

#
# Main
#

# shellcheck disable=SC2015
_dev_set_initialize &&
  _dev_set_load_local &&
  _dev_set_define_paths &&
  _dev_set_load_env &&
  _dev_set_load_profile &&
  _dev_set_load_secrets &&
  _dev_set_load_modules &&
  _dev_set_load_local_post &&
  _dev_set_legacy &&
  _dev_set_cleanup ||
  { db64_msg_show_error 'failed to load Dev environment variables' && return 1; }
[[ -n "$DEV_CICD_DEBUG" ]] && set +x
:
