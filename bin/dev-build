#!/usr/bin/env bash
#
# Create the BashLib64 stand-alone distributable file
#

# shellcheck source=SCRIPTDIR/dev-set
source './bin/dev-set' || {
  echo 'unable to load dev env'
  exit 1
}

# shellcheck source=SCRIPTDIR/../lib/bashlib64.bash
source "$DEVBL_LIB_BASHLIB64" || exit 1

function dev_add_modules() {
  local destination="$1"
  local modules="$2"

  # shellcheck disable=SC2119
  for file in $modules; do
    [[ ! -f "bl64-${file}-env.bash" ]] && continue
    bl64_msg_show_task "adding module ${file} environment"
    { "$BL64_OS_CMD_CAT" "bl64-${file}-env.bash" && bl64_fmt_separator_line; } >>"$destination" ||
      return $?
  done

  # shellcheck disable=SC2119
  for file in $modules; do
    bl64_msg_show_task "adding module ${file} code"
    {
      [[ -f "bl64-${file}-setup.bash" ]] && "$BL64_OS_CMD_CAT" "bl64-${file}-setup.bash" && bl64_fmt_separator_line
      "$BL64_OS_CMD_CAT" "bl64-${file}.bash" && bl64_fmt_separator_line
    } >>"$destination" ||
      return $?
  done
}

function dev_build_test() {
  local file=''
  local build_full="${DEVBL_BUILD_BASHLIB64}/${DEVBL_BUILD_BASHLIB64_FULL}"
  local build_core="${DEVBL_BUILD_BASHLIB64}/${DEVBL_BUILD_BASHLIB64_CORE}"
  local build_opt="${DEVBL_BUILD_BASHLIB64}/${DEVBL_BUILD_BASHLIB64_OPT}"

  bl64_dbg_app_show_vars 'DEVBL_MODULES_CORE' 'DEVBL_MODULES_OPT'
  cd "$DEVBL_SRC" || return 1

  # Create header
  bl64_msg_show_task "creating library header (${build_full})"
  # shellcheck disable=SC2119
  {
    "$BL64_OS_CMD_CAT" "bl64-lib-header.bash" && bl64_fmt_separator_line
    "$BL64_OS_CMD_CAT" "bl64-lib-bootstrap.bash" && bl64_fmt_separator_line
    "$BL64_OS_CMD_CAT" "bl64-lib-env.bash"
  } >"$build_full" || return 1

  bl64_msg_show_task "creating library header (${build_core})"
  bl64_fs_cp_file "$build_full" "$build_core" || return $?

  bl64_msg_show_task "creating library header (${build_opt})"
  # shellcheck disable=SC2119
  {
    "$BL64_OS_CMD_CAT" "bl64-lib-header.bash" && bl64_fmt_separator_line
  } >"$build_opt" || return 1

  dev_add_modules "$build_full" "${DEVBL_MODULES_CORE} ${DEVBL_MODULES_OPT}"
  dev_add_modules "$build_core" "$DEVBL_MODULES_CORE"
  dev_add_modules "$build_opt" "$DEVBL_MODULES_OPT"

  bl64_msg_show_task 'adding core'
  # shellcheck disable=SC2119
  { "$BL64_OS_CMD_CAT" "bl64-lib.bash" && bl64_fmt_separator_line; } >>"$build_full"
  # shellcheck disable=SC2119
  { "$BL64_OS_CMD_CAT" "bl64-lib.bash" && bl64_fmt_separator_line; } >>"$build_core"
  bl64_fs_run_chmod '0755' "$build_full" "$build_core"
}

function dev_build_docs() {
  local file=''
  local module_env=''
  local module_code=''
  local module_init=''

  bl64_dbg_app_show_info "DEVBL_MODULES_CORE='${DEVBL_MODULES_CORE}'"
  cd "$DEVBL_SRC" || return 1

  for file in lib $DEVBL_MODULES_CORE $DEVBL_MODULES_OPT; do
    module_env="bl64-${file}-env.bash"
    [[ ! -f "$module_env" ]] && module_env="$BL64_VAR_NULL"
    module_code="bl64-${file}.bash"
    [[ ! -f "$module_code" ]] && module_code="$BL64_VAR_NULL"
    module_init="bl64-${file}-setup.bash"
    [[ ! -f "$module_init" ]] && module_init="$BL64_VAR_NULL"

    bl64_msg_show_task "creating document for: ${file}"
    dev_build_md "$file" "$module_env" "$module_code" "$module_init" >"${DEVBL_DOCS}/bl64-${file}.md"
  done
}

function dev_build_md() {
  local module="$1"
  local module_env="$2"
  local module_code="$3"
  local module_init="$4"

  printf '# Module: %s\n\n' "${module}"

  if [[ "$module_env" != "$BL64_VAR_NULL" ]]; then
    printf '## Header\n\n'
    printf '```shell\n'
    [[ "$module" == 'lib' ]] && printf '{%% include "../src/bl64-%s.header" %%}\n' "$module"
    printf '{%% include "../src/bl64-%s-env.bash" %%}\n' "$module"
    printf '```\n\n'
  fi
  if [[ "$module_init" != "$BL64_VAR_NULL" ]]; then
    printf '## Setup\n\n'
    printf '```shell\n'
    printf '{%% include "../src/bl64-%s.init" %%}\n' "$module"
    printf '```\n\n'
  fi
  printf '## Code\n\n'
  printf '```shell\n'
  printf '{%% include "../src/bl64-%s.bash" %%}\n' "$module"
  printf '```\n'

}

function dev_promote() {
  local build_full="${DEVBL_BUILD_BASHLIB64}/${DEVBL_BUILD_BASHLIB64_FULL}"
  local build_core="${DEVBL_BUILD_BASHLIB64}/${DEVBL_BUILD_BASHLIB64_CORE}"
  local build_opt="${DEVBL_BUILD_BASHLIB64}/${DEVBL_BUILD_BASHLIB64_OPT}"

  dev_build_test &&
    bl64_msg_show_task "promoting library from: ${build_full}" &&
    bl64_fs_cp_file "$build_full" "$DEVBL_PROD_BASHLIB64" &&
    bl64_msg_show_task "promoting library from: ${build_core}" &&
    bl64_fs_cp_file "$build_core" "$DEVBL_PROD_BASHLIB64" &&
    bl64_msg_show_task "promoting library from: ${build_opt}" &&
    bl64_fs_cp_file "$build_opt" "$DEVBL_PROD_BASHLIB64"
}

function dev_build_check_requirements() {
  [[ -z "$dev_build_command" ]] && dev_build_help return 1
  bl64_check_directory "$DEVBL_SRC" || return 1
}

function dev_build_help() {
  bl64_msg_show_usage \
    '<-p|-t|-d> [-h]' \
    'Create the BashLib64 stand-alone distributable file' \
    '
  -p: Build stand-alone file and promote to public location
  -t: Build stand-alone file for testing
  -d: Build documentation
  ' '
  -h: Show Help
  ' ''
}

#
# Main
#

declare -i dev_build_status=1
declare dev_build_command=''
declare dev_build_option=''

(($# == 0)) && dev_build_help && exit 1
while getopts ':ptdh' dev_build_option; do
  case "$dev_build_option" in
  p) dev_build_command='dev_promote' ;;
  t) dev_build_command='dev_build_test' ;;
  d) dev_build_command='dev_build_docs' ;;
  h) dev_build_help && exit ;;
  *) dev_build_help && exit 1 ;;
  esac
done
dev_build_check_requirements || exit 1

bl64_msg_show_batch_start "$dev_build_command"
case "$dev_build_command" in
'dev_build_docs' | 'dev_build_test' | 'dev_promote') "$dev_build_command" ;;
*) bl64_check_alert_undefined "$dev_build_command" ;;
esac
dev_build_status=$?

bl64_msg_show_batch_finish $dev_build_status "$dev_build_command"
exit $dev_build_status
