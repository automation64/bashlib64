#!/usr/bin/env bash
#
# Run test-cases
#
# * Test cases are done using bats-core
# * TestManSH is used to manage test environment
# * Tests are located in the default path "test/batscore"
# * Template: 2.0.2
#

#
# Imports
#

# shellcheck source=bin/dev-set
source ./bin/dev-set || exit 1
# shellcheck source=lib/bl64/bashlib64-core.bash
source "${DEV_CICD_BASHLIB64}/bashlib64-core.bash" || exit 1

#
# Functions
#

function dev_test_bash_ansible() {
  bl64_dbg_lib_show_function
  "$DEV_CICD_TESTMANSH" -b -o -e "$DEV_TEST_CONTAINER_ANSIBLE" -c "$DEV_TEST_CASE_ANSIBLE"
}

function dev_test_bash_cloud() {
  bl64_dbg_lib_show_function
  "$DEV_CICD_TESTMANSH" -b -o -e "$DEV_TEST_CONTAINER_CLOUD" -c "$DEV_TEST_CASE_CLOUD"
}

function dev_test_bash_container() {
  bl64_dbg_lib_show_function
  local target=''
  for target in $DEV_TEST_CONTAINER_CONTAINER; do
    "$DEV_CICD_TESTMANSH" -b -o -e "$target" -c "$DEV_TEST_CASE_CONTAINER" || exit $?
  done
}

function dev_test_bash_kubernetes() {
  bl64_dbg_lib_show_function
  "$DEV_CICD_TESTMANSH" -b -o -e "$DEV_TEST_CONTAINER_TERRAFORM" -c "$DEV_TEST_CASE_TERRAFORM"
}

function dev_test_bash_mongodb() {
  bl64_dbg_lib_show_function
  "$DEV_CICD_TESTMANSH" -b -o -e "$DEV_TEST_CONTAINER_MONGODB" -c "$DEV_TEST_CASE_MONGODB"
}

function dev_test_bash_non_os() {
  bl64_dbg_lib_show_function
  "$DEV_CICD_TESTMANSH" -b -o -e "$DEV_TEST_CONTAINER_NON_OS" -c "$DEV_TEST_CASE_NON_OS"
}

function dev_test_bash_opt() {
  bl64_dbg_lib_show_function
  "$DEV_CICD_TESTMANSH" -b -o -e "$DEV_TEST_CONTAINER_OPT" -c "$DEV_TEST_CASE_OPT"
}

function dev_test_bash_terraform() {
  bl64_dbg_lib_show_function
  "$DEV_CICD_TESTMANSH" -b -o -e "$DEV_TEST_CONTAINER_TERRAFORM" -c "$DEV_TEST_CASE_TERRAFORM"
}

function dev_test_bash_os() {
  bl64_dbg_lib_show_function "$@"
  local family="$1"
  local target=''
  case "$family" in
  'single')
    for target in $DEV_TEST_CONTAINER_OS_SINGLE; do
      "$DEV_CICD_TESTMANSH" -b -o -e "$target" -c "$DEV_TEST_CASE_OS" || exit $?
    done
    ;;
  'fedora')
    for target in $DEV_TEST_CONTAINER_OS_FEDORA; do
      "$DEV_CICD_TESTMANSH" -b -o -e "$target" -c "$DEV_TEST_CASE_OS" || exit $?
    done
    ;;
  'redhat')
    for target in $DEV_TEST_CONTAINER_OS_REDHAT; do
      "$DEV_CICD_TESTMANSH" -b -o -e "$target" -c "$DEV_TEST_CASE_OS" || exit $?
    done
    ;;
  'debian')
    for target in $DEV_TEST_CONTAINER_OS_DEBIAN; do
      "$DEV_CICD_TESTMANSH" -b -o -e "$target" -c "$DEV_TEST_CASE_OS" || exit $?
    done
    ;;
  'other')
    for target in $DEV_TEST_CONTAINER_OS_OTHER; do
      "$DEV_CICD_TESTMANSH" -b -o -e "$target" -c "$DEV_TEST_CASE_OS" || exit $?
    done
    ;;
  'reduced')
    for target in $DEV_TEST_CONTAINER_OS_REDUCED; do
      "$DEV_CICD_TESTMANSH" -b -o -e "$target" -c "$DEV_TEST_CASE_OS" || exit $?
    done
    ;;
  *) bl64_check_alert_undefined "$family" ;;
  esac
}

#
# Main
#

declare dev_test_group="${1:-os}"
declare dev_test_family="${2:-other}"

[[ -n "$DEV_CICD_DEBUG" ]] && bl64_dbg_all_enable

bl64_check_export 'DEV_CICD_TESTMANSH' ||
  exit $?

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start 'test-bash'
case "$dev_test_group" in
'ansible') dev_test_bash_ansible ;;
'cloud') dev_test_bash_cloud ;;
'container') dev_test_bash_container ;;
'kubernetes') dev_test_bash_kubernetes ;;
'mongodb') dev_test_bash_mongodb ;;
'non_os') dev_test_bash_non_os ;;
'opt') dev_test_bash_opt ;;
'os') dev_test_bash_os "$dev_test_family" ;;
'terraform') dev_test_bash_terraform ;;
*) bl64_check_alert_undefined "$dev_test_group" ;;
esac
bl64_msg_show_batch_finish $? 'test-bash'
