#!/usr/bin/env bash
#
# Assemble modular script
#
# * Use to build script from multiple sources (modular)
# * Template: 2.0.1
#

#
# Imports
#

# shellcheck source=bin/dev-set
source ./bin/dev-set || exit 1
# shellcheck source=lib/bl64/bashlib64.bash
source "${DEV_CICD_BASHLIB64}/bashlib64.bash" || exit 1

#
# Functions
#

# shellcheck disable=SC2317
function dev_add_modules() {
  bl64_dbg_lib_show_function "$@"
  local destination="$1"
  local modules="$2"

  # shellcheck disable=SC2119
  for file in $modules; do
    [[ ! -f "bl64-${file}-env.bash" ]] && continue
    { "$BL64_OS_CMD_CAT" "bl64-${file}-env.bash" && bl64_fmt_separator_line; } >>"$destination" ||
      return $?
  done

  # shellcheck disable=SC2119
  for file in $modules; do
    {
      [[ -f "bl64-${file}-setup.bash" ]] && "$BL64_OS_CMD_CAT" "bl64-${file}-setup.bash" && bl64_fmt_separator_line
      "$BL64_OS_CMD_CAT" "bl64-${file}.bash" && bl64_fmt_separator_line
    } >>"$destination" ||
      return $?
  done
}

# shellcheck disable=SC2317
function dev_build_create_header() {
  bl64_dbg_lib_show_function
  "$BL64_OS_CMD_CAT" "bl64-lib-header.bash" &&
    bl64_fmt_separator_line &&
    "$BL64_OS_CMD_CAT" "bl64-lib-bootstrap.bash" &&
    bl64_fmt_separator_line &&
    "$BL64_OS_CMD_CAT" "bl64-lib-env.bash" &&
    "$BL64_OS_CMD_CAT" "bl64-lib.bash"
}

# shellcheck disable=SC2317
function dev_build_release() {
  bl64_dbg_lib_show_function
  local file=''
  local build_full="${DEV_BUILD_FULL_PATH_RELEASE}/${DEV_BUILD_NAME_SINGLE}"
  local build_core="${DEV_BUILD_FULL_PATH_RELEASE}/${DEV_BUILD_NAME_CORE}"
  local build_opt="${DEV_BUILD_FULL_PATH_RELEASE}/${DEV_BUILD_NAME_OPT}"
  local build_module_core="${DEV_BUILD_FULL_PATH_RELEASE}/${DEV_BUILD_NAME_MODULE_CORE}"
  local build_module=''
  local module_name=''

  bl64_dbg_app_show_vars 'DEV_MODULES_CORE' 'DEV_MODULES_OPT'
  cd "$DEV_SRC" || return 1

  bl64_fs_rm_full "$DEV_BUILD_FULL_PATH_RELEASE"
  bl64_fs_create_dir '0777' "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$DEV_BUILD_FULL_PATH_RELEASE" ||
    return $?

  # Create header
  bl64_msg_show_task 'creating library header'
  # shellcheck disable=SC2119
  dev_build_create_header >"$build_full" &&
    bl64_fs_cp_file "$build_full" "$build_core" &&
    bl64_fs_cp_file "$build_full" "$build_module_core" ||
    return $?
  # shellcheck disable=SC2119
  {
    "$BL64_OS_CMD_CAT" "bl64-lib-header.bash" && bl64_fmt_separator_line
  } >"$build_opt" || return 1

  bl64_msg_show_task 'adding modules'
  dev_add_modules "$build_full" "${DEV_MODULES_CORE} ${DEV_MODULES_OPT}" &&
    dev_add_modules "$build_core" "$DEV_MODULES_CORE" &&
    dev_add_modules "$build_opt" "$DEV_MODULES_OPT" ||
    return $?

  for module_name in ${DEV_MODULES_CORE} ${DEV_MODULES_OPT}; do
    build_module="${DEV_BUILD_FULL_PATH_RELEASE}/${DEV_BUILD_NAME_MODULE}-${module_name}.bash"
    dev_add_modules "${build_module}.tmp" "$module_name"
    {
      "$BL64_OS_CMD_CAT" 'bl64-lib-header.bash' &&
        bl64_fmt_separator_line &&
        "$BL64_OS_CMD_CAT" "${build_module}.tmp"
    } >"$build_module" || return 1
    bl64_fs_rm_file "${build_module}.tmp"
  done

  bl64_msg_show_task 'adding main'
  # shellcheck disable=SC2119
  { "$BL64_OS_CMD_CAT" "bl64-lib-main.bash" && bl64_fmt_separator_line; } >>"$build_full" &&
    { "$BL64_OS_CMD_CAT" "bl64-lib-main.bash" && bl64_fmt_separator_line; } >>"$build_core" &&
    { "$BL64_OS_CMD_CAT" "bl64-lib-main.bash" && bl64_fmt_separator_line; } >>"$build_module_core"
}

# shellcheck disable=SC2317
function dev_build_test() {
  bl64_dbg_lib_show_function
  local file=''
  local build_full="${DEV_BUILD_FULL_PATH_TEST}/${DEV_BUILD_NAME_SINGLE}"

  bl64_dbg_app_show_vars 'DEV_MODULES_CORE' 'DEV_MODULES_OPT'
  cd "$DEV_SRC" || return 1

  bl64_fs_rm_full "$DEV_BUILD_FULL_PATH_TEST"
  bl64_fs_create_dir '0777' "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$DEV_BUILD_FULL_PATH_TEST" ||
    return $?

  bl64_msg_show_task "creating stand-alone file for testing (${build_full})"
  dev_build_create_header >"$build_full" &&
    dev_add_modules "$build_full" "${DEV_MODULES_CORE} ${DEV_MODULES_OPT}" &&
    { "$BL64_OS_CMD_CAT" "bl64-lib-main.bash" && bl64_fmt_separator_line; } >>"$build_full" ||
    return $?
  bl64_fs_run_chmod '0755' "$build_full"
}

# shellcheck disable=SC2317
function dev_build_docs() {
  bl64_dbg_lib_show_function
  local file=''
  local module_env=''
  local module_code=''
  local module_init=''

  bl64_dbg_app_show_info "DEV_MODULES_CORE='${DEV_MODULES_CORE}'"
  cd "$DEV_SRC" || return 1

  for file in lib $DEV_MODULES_CORE $DEV_MODULES_OPT; do
    module_env="bl64-${file}-env.bash"
    [[ ! -f "$module_env" ]] && module_env="$BL64_VAR_NULL"
    module_code="bl64-${file}.bash"
    [[ ! -f "$module_code" ]] && module_code="$BL64_VAR_NULL"
    module_init="bl64-${file}-setup.bash"
    [[ ! -f "$module_init" ]] && module_init="$BL64_VAR_NULL"

    bl64_msg_show_task "creating document for: ${file}"
    dev_build_md "$file" "$module_env" "$module_code" "$module_init" >"${DEV_DOCS}/bl64-${file}.md"
  done
}

# shellcheck disable=SC2317
function dev_build_md() {
  bl64_dbg_lib_show_function "$@"
  local module="$1"
  local module_env="$2"
  local module_code="$3"
  local module_init="$4"

  printf '# Module: %s\n\n' "${module}"

  if [[ "$module_env" != "$BL64_VAR_NULL" ]]; then
    printf '## Header\n\n'
    printf '```shell\n'
    [[ "$module" == 'lib' ]] && printf '{%% include "../src/bl64-%s.header" %%}\n' "$module"
    printf '{%% include "../src/bl64-%s-env.bash" %%}\n' "$module"
    printf '```\n\n'
  fi
  if [[ "$module_init" != "$BL64_VAR_NULL" ]]; then
    printf '## Setup\n\n'
    printf '```shell\n'
    printf '{%% include "../src/bl64-%s.init" %%}\n' "$module"
    printf '```\n\n'
  fi
  printf '## Code\n\n'
  printf '```shell\n'
  printf '{%% include "../src/bl64-%s.bash" %%}\n' "$module"
  printf '```\n'

}

function dev_build_check_requirements() {
  [[ -z "$dev_build_command" ]] && dev_build_help return 1
  bl64_check_directory "$DEV_SRC"
  bl64_check_export 'DEV_BUILD_FULL_PATH_TEST' &&
    bl64_check_export 'DEV_BUILD_NAME_CORE' &&
    bl64_check_export 'DEV_BUILD_NAME_MODULE_CORE' &&
    bl64_check_export 'DEV_BUILD_NAME_MODULE' &&
    bl64_check_export 'DEV_BUILD_NAME_OPT' &&
    bl64_check_export 'DEV_BUILD_NAME_SINGLE' &&
    bl64_check_export 'DEV_MODULES_CORE' &&
    bl64_check_export 'DEV_MODULES_OPT' &&
    bl64_check_export 'DEV_BUILD_FULL_PATH_RELEASE' &&
    bl64_check_directory "$DEV_DOCS"
}

function dev_build_help() {
  bl64_msg_show_usage \
    '<-t|-r|-d> [-h]' \
    'Create the BashLib64 stand-alone distributable file' \
    '
  -t: Build stand-alone file for testing
  -r: Build release files
  -d: Build documentation
  ' '
  -h: Show Help
  ' ''
}

#
# Main
#

declare dev_build_command=''
declare dev_build_option=''

(($# == 0)) && dev_build_help && exit 1
while getopts ':trdh' dev_build_option; do
  case "$dev_build_option" in
  t) dev_build_command='dev_build_test' ;;
  r) dev_build_command='dev_build_release' ;;
  d) dev_build_command='dev_build_docs' ;;
  h) dev_build_help && exit ;;
  *) dev_build_help && exit 1 ;;
  esac
done
dev_build_check_requirements || exit 1
[[ -n "$DEV_CICD_DEBUG" ]] && bl64_dbg_all_enable

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$dev_build_command"
case "$dev_build_command" in
'dev_build_docs' | 'dev_build_test' | 'dev_build_release') "$dev_build_command" ;;
*) bl64_check_alert_undefined "$dev_build_command" ;;
esac
bl64_msg_show_batch_finish $? "$dev_build_command"
