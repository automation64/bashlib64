#!/usr/bin/env bash
#######################################
# Create the BashLib64 stand-alone distributable file
#
# Author: serdigital64 (https://github.com/serdigital64)
# License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt)
# Repository: https://github.com/serdigital64/bashlib64
# Version: 1.2.0
#######################################

# shellcheck disable=SC1091
source './bin/devbl-set' || {
  echo 'unable to load dev env'
  exit 1
}
# shellcheck disable=SC1090
source "$DEVBL_LIB_BASHLIB64" || exit 1

function devbl_build_standalone() {

  local promote="$1"
  local test="$2"
  local file=''
  local lib="$DEVBL_BUILD/bashlib64.bash"

  bl64_dbg_app_show_info "DEVBL_MODULES='${DEVBL_MODULES}'"

  # Create header
  bl64_msg_show_task "creating stand-alone library: $lib"
  {
    "$BL64_OS_CMD_CAT" "$DEVBL_SRC/bl64-lib.header" &&
      echo '' &&
      "$BL64_OS_CMD_CAT" "$DEVBL_SRC/bl64-lib.env" ||
      return $?
  } >"$lib"

  # Add global variables
  for file in $DEVBL_MODULES; do
    bl64_msg_show_task "adding module $file environment"
    "$BL64_OS_CMD_CAT" "${DEVBL_SRC}/bl64-${file}.env" >>"$lib" &&
      echo '' >>"$lib" ||
      return $?
  done

  # Add core module
  for file in $DEVBL_MODULES; do
    bl64_msg_show_task "adding module $file code"
    {
      "$BL64_OS_CMD_CAT" "${DEVBL_SRC}/bl64-${file}-init.bash" &&
        echo '' &&
        "$BL64_OS_CMD_CAT" "${DEVBL_SRC}/bl64-${file}.bash" &&
        echo '' ||
        return $?
    } >>"$lib"
  done

  # Add remaining modules
  bl64_msg_show_task 'adding core'
  "$BL64_OS_CMD_CAT" "$DEVBL_SRC/bl64-lib.bash" >>"$lib" || return $?

  if [[ "$promote" == '1' ]]; then
    bl64_msg_show_task 'promoting library'
    bl64_fmt_strip_comments "$lib" >"$DEVBL_ROOT" || return $?
  fi

  if [[ "$test" == '1' ]]; then
    bl64_msg_show_task 'updating test library'
    bl64_fs_cp_file "$lib" "$DEVBL_TEST_BASHLIB64" || return $?
  fi
  return 0
}

function devbl_build_check() {
  [[ -z "$devbl_build_command" ]] && devbl_build_help return 1
  bl64_check_directory "$DEVBL_SRC" || return 1
}

function devbl_build_help() {
  bl64_msg_show_usage \
    '[-b] [-p] [-t] [-h]' \
    'Create the BashLib64 stand-alone distributable file' \
    '
  -b: Build stand-alone file
  ' '
  -p: Promote: copy the stand-alone file to the public location
  -t: Update test/lib: copy the stand-alone file to the testing environment' ''
}

#
# Main
#

declare devbl_build_status=1
declare devbl_build_command=''
declare devbl_build_option=''
declare devbl_build_promote='0'
declare devbl_build_test='0'

(($# == 0)) && devbl_build_help && exit 1
while getopts ':bpth' devbl_build_option; do
  case "$devbl_build_option" in
  p) devbl_build_promote='1' ;;
  t) devbl_build_test='1' ;;
  b)
    devbl_build_command='devbl_build_standalone'
    devbl_build_command_tag='build stand-alone library'
    ;;
  h) devbl_build_help && exit ;;
  \?) devbl_build_help && exit 1 ;;
  esac
done
devbl_build_check || exit 1

bl64_msg_show_batch_start "$devbl_build_command_tag"
case "$devbl_build_command" in
'devbl_build_standalone') "$devbl_build_command" "$devbl_build_promote" "$devbl_build_test" ;;
esac
devbl_build_status=$?

bl64_msg_show_batch_finish $devbl_build_status "$devbl_build_command_tag"
exit $devbl_build_status
