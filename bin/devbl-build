#!/usr/bin/env bash
#######################################
# Create the BashLib64 stand-alone distributable file
#
# Author: serdigital64 (https://github.com/serdigital64)
# License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt)
# Repository: https://github.com/serdigital64/bashlib64
# Version: 1.3.0
#######################################

# shellcheck source=SCRIPTDIR/devbl-set
source './bin/devbl-set' || {
  echo 'unable to load dev env'
  exit 1
}

# shellcheck source-path=SCRIPTDIR/../lib disable=SC2154
source "$DEVBL_LIB_BASHLIB64" || exit 1

function devbl_build_standalone() {
  local file=''

  bl64_dbg_app_show_info "DEVBL_MODULES='${DEVBL_MODULES}'"
  cd "$DEVBL_SRC" || return 1

  # Create header
  bl64_msg_show_task "creating stand-alone library: $DEVBL_BUILD_BASHLIB64"
  {
    "$BL64_OS_CMD_CAT" "bl64-lib.header" && bl64_fmt_separator_line
    "$BL64_OS_CMD_CAT" "bl64-lib-env.bash"
  } >"$DEVBL_BUILD_BASHLIB64" || return 1

  for file in $DEVBL_MODULES; do
    [[ ! -f "bl64-${file}-env.bash" ]] && continue
    bl64_msg_show_task "adding module ${file} environment"
    { "$BL64_OS_CMD_CAT" "bl64-${file}-env.bash" && bl64_fmt_separator_line; } >>"$DEVBL_BUILD_BASHLIB64"
  done || return 1

  for file in $DEVBL_MODULES; do
    bl64_msg_show_task "adding module ${file} code"
    {
      [[ -f "bl64-${file}-setup.bash" ]] && "$BL64_OS_CMD_CAT" "bl64-${file}-setup.bash" && bl64_fmt_separator_line
      "$BL64_OS_CMD_CAT" "bl64-${file}.bash" && bl64_fmt_separator_line
    } >>"$DEVBL_BUILD_BASHLIB64"
  done || return 1

  # Add remaining modules
  bl64_msg_show_task 'adding core'
  { "$BL64_OS_CMD_CAT" "bl64-lib.bash" && bl64_fmt_separator_line; } >>"$DEVBL_BUILD_BASHLIB64"
}

function devbl_build_docs() {
  local file=''
  local module_env=''
  local module_code=''
  local module_init=''

  bl64_dbg_app_show_info "DEVBL_MODULES='${DEVBL_MODULES}'"
  cd "$DEVBL_SRC" || return 1

  for file in lib $DEVBL_MODULES; do
    module_env="bl64-${file}-env.bash"
    [[ ! -f "$module_env" ]] && module_env="$BL64_LIB_VAR_NULL"
    module_code="bl64-${file}.bash"
    [[ ! -f "$module_code" ]] && module_code="$BL64_LIB_VAR_NULL"
    module_init="bl64-${file}.init"
    [[ ! -f "$module_init" ]] && module_init="$BL64_LIB_VAR_NULL"

    bl64_msg_show_task "creating document for: ${file}"
    devbl_build_md "$file" "$module_env" "$module_code" "$module_init" >"${DEVBL_DOCS}/bl64-${file}.md"
  done
}

function devbl_build_md() {
  local module="$1"
  local module_env="$2"
  local module_code="$3"
  local module_init="$4"

  printf '# Module: %s\n\n' "${module}"

  if [[ "$module_env" != "$BL64_LIB_VAR_NULL" ]]; then
    printf '## Header\n\n'
    printf '```shell\n'
    [[ "$module" == 'lib' ]] && printf '{%% include "../src/bl64-%s.header" %%}\n' "$module"
    printf '{%% include "../src/bl64-%s-env.bash" %%}\n' "$module"
    printf '```\n\n'
  fi
  if [[ "$module_init" != "$BL64_LIB_VAR_NULL" ]]; then
    printf '## Setup\n\n'
    printf '```shell\n'
    printf '{%% include "../src/bl64-%s.init" %%}\n' "$module"
    printf '```\n\n'
  fi
  printf '## Code\n\n'
  printf '```shell\n'
  printf '{%% include "../src/bl64-%s.bash" %%}\n' "$module"
  printf '```\n'

}

function devbl_promote_test() {
  devbl_build_standalone &&
    bl64_msg_show_task "promoting library to: ${DEVBL_TEST_BASHLIB64}" &&
    bl64_fs_cp_file "$DEVBL_BUILD_BASHLIB64" "$DEVBL_TEST_BASHLIB64"
}

function devbl_promote_prod() {
  devbl_build_standalone &&
    bl64_msg_show_task "promoting library to: ${DEVBL_PROD_BASHLIB64}" &&
    bl64_fs_cp_file "$DEVBL_BUILD_BASHLIB64" "$DEVBL_PROD_BASHLIB64"
}

function devbl_build_check_requirements() {
  [[ -z "$devbl_build_command" ]] && devbl_build_help return 1
  bl64_check_directory "$DEVBL_SRC" || return 1
}

function devbl_build_help() {
  bl64_msg_show_usage \
    '<-b|-p|-t|-d> [-h]' \
    'Create the BashLib64 stand-alone distributable file' \
    '
  -b: Build stand-alone file
  -p: Promote: copy the stand-alone file to the public location
  -t: Update test/lib: copy the stand-alone file to the testing environment
  -d: Build documentation
  ' '
  -h: Show Help
  ' ''
}

#
# Main
#

declare -i devbl_build_status=1
declare devbl_build_command=''
declare devbl_build_option=''

(($# == 0)) && devbl_build_help && exit 1
while getopts ':bptdh' devbl_build_option; do
  case "$devbl_build_option" in
  p)
    devbl_build_command='devbl_promote_prod'
    devbl_build_command_tag='build stand-alone and promote to production'
    ;;
  t)
    devbl_build_command='devbl_promote_test'
    devbl_build_command_tag='build stand-alone and promote to testing'
    ;;
  b)
    devbl_build_command='devbl_build_standalone'
    devbl_build_command_tag='build stand-alone library'
    ;;
  d)
    devbl_build_command='devbl_build_docs'
    devbl_build_command_tag='build library documentation'
    ;;
  h) devbl_build_help && exit ;;
  *) devbl_build_help && exit 1 ;;
  esac
done
devbl_build_check_requirements || exit 1

bl64_msg_show_batch_start "$devbl_build_command_tag"
case "$devbl_build_command" in
'devbl_build_standalone' | 'devbl_build_docs' | 'devbl_promote_test' | 'devbl_promote_prod') "$devbl_build_command" ;;
*) bl64_check_alert_undefined "$devbl_build_command" ;;
esac
devbl_build_status=$?

bl64_msg_show_batch_finish $devbl_build_status "$devbl_build_command_tag"
exit $devbl_build_status
